import{ab as i,G as a,H as t,ad as n}from"./framework-894cff3a.js";const o={},s=n('<h1 id="云原生第10课-istio流量治理与监控管理" tabindex="-1"><a class="header-anchor" href="#云原生第10课-istio流量治理与监控管理" aria-hidden="true">#</a> 云原生第10课：Istio流量治理与监控管理</h1><h2 id="服务治理介绍" tabindex="-1"><a class="header-anchor" href="#服务治理介绍" aria-hidden="true">#</a> 服务治理介绍</h2><h3 id="微服务发展" tabindex="-1"><a class="header-anchor" href="#微服务发展" aria-hidden="true">#</a> 微服务发展</h3><ul><li>微服务：互联网高速发展以及传统分布式、SOA架构无法适应快速的开发迭代等多重因素共同推动下的产物。</li><li>微服务雏形：微服务架构概念最早由Fred George在2012年的一次技术大会上所提出，拆分SOA服务实现解耦</li><li>微服务发扬光大：2014年，James Lewis和Martin Fowler发表了一篇名为《Microservices》的文章</li></ul><figure><img src="https://didiplus.oss-cn-hangzhou.aliyuncs.com/20230228112055.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="服务治理介绍-1" tabindex="-1"><a class="header-anchor" href="#服务治理介绍-1" aria-hidden="true">#</a> 服务治理介绍</h3><p>服务治理主要针对微服务, 究竟治理什么？</p><ul><li>服务注册和服务发现</li><li>服务负载均衡、路由、灰度、蓝绿</li><li>服务降级、熔断</li><li>服务限流</li><li>服务监控 微服务框架：SpringCloud、Dubbo</li></ul><figure><img src="https://didiplus.oss-cn-hangzhou.aliyuncs.com/20230228112243.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="服务网格与微服务框架流量治理对比" tabindex="-1"><a class="header-anchor" href="#服务网格与微服务框架流量治理对比" aria-hidden="true">#</a> 服务网格与微服务框架流量治理对比</h3><table><thead><tr><th></th><th>微服务框架</th><th>服务网格</th></tr></thead><tbody><tr><td>业务侵入性</td><td>SDK,侵入式开发</td><td>Sidecar,无侵入</td></tr><tr><td>开发语言</td><td>语言强相关，Java生态支持较好</td><td>开发语言无关</td></tr><tr><td>灵活性</td><td>静态配置，更新配置需要重启</td><td>非常灵活，动态配置</td></tr><tr><td>升级</td><td>需要业务开发优雅处理服务升级，具体很大难度</td><td>优雅升级简单</td></tr></tbody></table><h2 id="istio常用的流量治理策略" tabindex="-1"><a class="header-anchor" href="#istio常用的流量治理策略" aria-hidden="true">#</a> Istio常用的流量治理策略</h2><h3 id="流量治理策略一-服务注册-发现" tabindex="-1"><a class="header-anchor" href="#流量治理策略一-服务注册-发现" aria-hidden="true">#</a> 流量治理策略一：服务注册&amp;发现</h3><figure><img src="https://didiplus.oss-cn-hangzhou.aliyuncs.com/20230228113003.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>Istio的服务注册发现是由Pilot完成的，Pilot通过K8s list watch接口发8现service、endpoint, 再将service、endpoint转化为Envoy xDS配置，并将配置下发</li><li>Pilot也支持来自K8s、Consul、Eureka、ZooKeeper的服务发现</li><li>其他方式都是常用的微服务框架所依赖的注册中心，通常需要业务代码集成服务注册于发现机制</li><li>推荐方式：更加推荐 直接利用 k8s，在托管K8s环境中，直接使用托管服务，不再需要直接管理注册中心，减轻业务开发、运维负担</li></ul><h3 id="流量治理策略二-负载均衡" tabindex="-1"><a class="header-anchor" href="#流量治理策略二-负载均衡" aria-hidden="true">#</a> 流量治理策略二：负载均衡</h3><p>支持的负载均衡算法通常有：加权轮询、最少请求、环形Hash、随机、优先级负载均衡以及Locality 加权。</p><p>Istio负载均衡的表示方法主要是通过DestinationRule TrafficPolicy, TrafficPolicy支持服务力度及服务的端口力度。</p><p><strong>常用的TrafficPolicy的API:</strong></p><figure><img src="https://didiplus.oss-cn-hangzhou.aliyuncs.com/20230228113129.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>LocalityLoadBalancerSetting8主要支持两种：</p><figure><img src="https://didiplus.oss-cn-hangzhou.aliyuncs.com/20230228113149.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>流量治理策略二：负载均衡使用说明</strong></p><figure><img src="https://didiplus.oss-cn-hangzhou.aliyuncs.com/20230228113255.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://didiplus.oss-cn-hangzhou.aliyuncs.com/20230228113303.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>高级的Loc8alityLoadBalancerSetting展示</strong></p><figure><img src="https://didiplus.oss-cn-hangzhou.aliyuncs.com/20230228113317.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://didiplus.oss-cn-hangzhou.aliyuncs.com/20230228113339.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="流量治理策略三-路由-流量切分、灰度发布" tabindex="-1"><a class="header-anchor" href="#流量治理策略三-路由-流量切分、灰度发布" aria-hidden="true">#</a> 流量治理策略三：路由（流量切分、灰度发布）</h3><p>路由匹配过程：请求下发后，根据路由匹配条件设置流量转发权重，主要是通过VirtualService.HTTPRoute API来控制的。</p><figure><img src="https://didiplus.oss-cn-hangzhou.aliyuncs.com/20230228113514.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://didiplus.oss-cn-hangzhou.aliyuncs.com/20230228113531.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>流量治理策略三：路由使用说明</strong></p><figure><img src="https://didiplus.oss-cn-hangzhou.aliyuncs.com/20230228113607.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://didiplus.oss-cn-hangzhou.aliyuncs.com/20230228113619.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="流量治理策略四-熔断、降级" tabindex="-1"><a class="header-anchor" href="#流量治理策略四-熔断、降级" aria-hidden="true">#</a> 流量治理策略四：熔断、降级</h3><figure><img src="https://didiplus.oss-cn-hangzhou.aliyuncs.com/20230228113647.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>熔断、降级是通过ConnectionPoolSettings进行设置：</p><figure><img src="https://didiplus.oss-cn-hangzhou.aliyuncs.com/20230228113710.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://didiplus.oss-cn-hangzhou.aliyuncs.com/20230228113719.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://didiplus.oss-cn-hangzhou.aliyuncs.com/20230228113729.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://didiplus.oss-cn-hangzhou.aliyuncs.com/20230228113744.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="流量治理策略五-故障注入" tabindex="-1"><a class="header-anchor" href="#流量治理策略五-故障注入" aria-hidden="true">#</a> 流量治理策略五：故障注入</h3><p>故障注入可以用来识别系统最薄弱的环节，支持的类型：</p><ul><li>HTTP请求响应延时注入</li><li>HTTP、gRPC错误码注入</li></ul><figure><img src="https://didiplus.oss-cn-hangzhou.aliyuncs.com/20230228113907.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>流量治理策略五：故障注入使用说明</strong></p><figure><img src="https://didiplus.oss-cn-hangzhou.aliyuncs.com/20230228113927.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://didiplus.oss-cn-hangzhou.aliyuncs.com/20230228113945.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="流量治理策略六-限流" tabindex="-1"><a class="header-anchor" href="#流量治理策略六-限流" aria-hidden="true">#</a> 流量治理策略六：限流</h3><p>Istio支持两种限流方式：</p><ul><li>中心集中式限流</li><li>本地限流</li></ul><figure><img src="https://didiplus.oss-cn-hangzhou.aliyuncs.com/20230228114023.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>流量治理策略六：限流使用说明</strong></p><figure><img src="https://didiplus.oss-cn-hangzhou.aliyuncs.com/20230228114043.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="流量治理策略七-失败重试" tabindex="-1"><a class="header-anchor" href="#流量治理策略七-失败重试" aria-hidden="true">#</a> 流量治理策略七：失败重试</h3><p>Istio支持失败重试HTTPRetry，提高系统的Resilience</p><figure><img src="https://didiplus.oss-cn-hangzhou.aliyuncs.com/20230228114137.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>流量治理策略七：失败重试使用说明</strong></p><figure><img src="https://didiplus.oss-cn-hangzhou.aliyuncs.com/20230228114156.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',60),g=[s];function c(e,l){return a(),t("div",null,g)}const r=i(o,[["render",c],["__file","10_Istio_traffic_governance_monitoring.html.vue"]]);export{r as default};
