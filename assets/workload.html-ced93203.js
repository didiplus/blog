import{ab as u,G as c,H as i,E as e,S as o,N as t,ac as n,L as _,W as a}from"./framework-b31a425c.js";const p={},h=e("h1",{id:"控制器-概述",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#控制器-概述","aria-hidden":"true"},"#"),o(" 控制器_概述")],-1),b=e("h2",{id:"概述",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#概述","aria-hidden":"true"},"#"),o(" 概述")],-1),k=e("p",null,"Pod（容器组）是 Kubernetes 中最小的调度单元，您可以通过 kubectl 直接创建一个 Pod。Pod 本身并不能自愈（self-healing）。如果一个 Pod 所在的 Node （节点）出现故障，或者调度程序自身出现故障，Pod 将被删除；同理，当因为节点资源不够或节点维护而驱逐 Pod 时，Pod 也将被删除。",-1),f=e("strong",null,"控制器可以提供如下特性：",-1),m=e("ul",null,[e("li",null,"水平扩展（运行 Pod 的多个副本）"),e("li",null,"rollout（版本更新）"),e("li",null,"self-healing（故障恢复） 例如：当一个节点出现故障，控制器可以自动地在另一个节点调度一个配置完全一样的 Pod，以替换故障节点上的 Pod。")],-1),g=e("p",null,[e("strong",null,"在 Kubernetes 支持的控制器有如下几种：")],-1),w={href:"https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/",target:"_blank",rel:"noopener noreferrer"},x=e("blockquote",null,[e("p",null,"Kubernetes 官方推荐使用 Deployment 替代 ReplicaSet")],-1),K={href:"https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller/",target:"_blank",rel:"noopener noreferrer"},y=e("blockquote",null,[e("p",null,"Kubernetes 官方推荐使用 Deployment 替代 ReplicationController")],-1),P={href:"https://kubernetes.io/docs/concepts/workloads/controllers/garbage-collection/",target:"_blank",rel:"noopener noreferrer"},C=e("blockquote",null,[e("p",null,"Kuboard 暂时不支持")],-1),R={href:"https://kubernetes.io/docs/concepts/workloads/controllers/ttlafterfinished/",target:"_blank",rel:"noopener noreferrer"},S=e("blockquote",null,[e("p",null,"Kuboard 暂时不支持")],-1),D=e("div",{class:"hint-container tip"},[e("p",{class:"hint-container-title"},"提示"),e("p",null,"常规的部署任务中所需要的控制器类型，Kuboard 都已经支持。以典型的 Spring Cloud 等微服务框架而言，Kuboard 已经可以非常好地对其进行运维和管理。")],-1),L=e("h2",{id:"在-kuboard-中的体现",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#在-kuboard-中的体现","aria-hidden":"true"},"#"),o(" 在 Kuboard 中的体现")],-1),N=e("p",null,"在 Kuboard 工作负载编辑器中，控制器的概念如下图所示：",-1),B=e("p",null,[e("strong",null,"界面如下图所示：")],-1),q=e("figure",null,[e("img",{src:"",alt:"Kubernetes教程：控制器概念结构",tabindex:"0",loading:"lazy"}),e("figcaption",null,"Kubernetes教程：控制器概念结构")],-1);function v(E,V){const d=a("font"),r=a("RouterLink"),l=a("Badge"),s=a("ExternalLinkIcon");return c(),i("div",null,[h,b,k,e("p",null,[o("Kubernetes 通过引入 Controller（控制器）的概念来管理 Pod 实例。在 Kubernetes 中，"),t(d,{color:"red"},{default:n(()=>[o("您应该始终通过创建 Controller 来创建 Pod，而不是直接创建 Pod")]),_:1}),o("。"),f]),m,g,e("ul",null,[e("li",null,[e("p",null,[t(r,{to:"/cloud/k8s/k8s-intermediate/workload/wl-deployment/"},{default:n(()=>[o("Deployment")]),_:1}),o(),t(l,{text:"Kuboard 已支持",type:"success"})])]),e("li",null,[e("p",null,[t(r,{to:"/cloud/k8s/k8s-intermediate/workload/wl-statefulset/"},{default:n(()=>[o("StatefulSet")]),_:1}),o(),t(l,{text:"Kuboard 已支持",type:"success"})])]),e("li",null,[e("p",null,[t(r,{to:"/cloud/k8s/k8s-intermediate/workload/wl-daemonset/"},{default:n(()=>[o("DaemonSet")]),_:1}),o(),t(l,{text:"Kuboard 已支持",type:"success"})])]),e("li",null,[e("p",null,[t(r,{to:"/cloud/k8s/k8s-intermediate/workload/wl-cronjob/"},{default:n(()=>[o("CronJob")]),_:1}),o(),t(l,{text:"Kuboard 正在计划中",type:"warn"})])]),e("li",null,[e("p",null,[t(r,{to:"/cloud/k8s/k8s-intermediate/workload/wl-job/"},{default:n(()=>[o("Jobs - Run to Completion")]),_:1}),o(),t(l,{text:"Kuboard 正在计划中",type:"warn"})])]),e("li",null,[e("p",null,[e("a",w,[o("ReplicaSet"),t(s)]),t(l,{text:"使用 Deployment",type:"error"})]),x]),e("li",null,[e("p",null,[e("a",K,[o("ReplicationController"),t(s)]),o(),t(l,{text:"使用 Deployment",type:"error"})]),y]),e("li",null,[e("p",null,[e("a",P,[o("Garbage Collection"),t(s)])]),C]),e("li",null,[e("p",null,[e("a",R,[o("TTL Controller for Finished Resources"),t(s)])]),S])]),D,L,N,_(' <img src="@source/cloud/k8s/k8s-intermediate/workload/workload.assets/image-20190910232615991.png" style="border: 1px solid #d7dae2; max-width: 600px;" alt="Kubernetes教程：控制器概念结构"></img> '),B,q])}const j=u(p,[["render",v],["__file","workload.html.vue"]]);export{j as default};
