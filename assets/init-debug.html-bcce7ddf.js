import{ab as r,G as o,H as c,E as e,S as n,N as a,ac as t,ad as u,W as s}from"./framework-894cff3a.js";const p={},v=e("h1",{id:"_3-3-5、容器组-debug初始化容器",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_3-3-5、容器组-debug初始化容器","aria-hidden":"true"},"#"),n(" 3.3.5、容器组_Debug初始化容器")],-1),b={href:"https://kubernetes.io/docs/tasks/debug-application-cluster/debug-init-containers/",target:"_blank",rel:"noopener noreferrer"},m=e("p",null,[n("本文描述了如何诊断初始化容器InitContainer在执行过程中的问题_本文中的命令行使用 "),e("code",null,"<pod-name>"),n(" 来指代Pod的名称_使用 "),e("code",null,"<init-container-1>"),n(" 和 "),e("code",null,"<init-container-2>"),n(" 来指代初始化容器的名称。")],-1),h={class:"table-of-contents"},g=u(`<h2 id="检查初始化容器的状态" tabindex="-1"><a class="header-anchor" href="#检查初始化容器的状态" aria-hidden="true">#</a> 检查初始化容器的状态</h2><p>执行命令，查看 Pod 的状态：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>kubectl get pod <span class="token operator">&lt;</span>pod-name<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>例如，状态如果是 <code>Init:1/2</code>，则表明了两个初始化容器当中的一个已经成功执行：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>NAME         READY     STATUS     RESTARTS   AGE
&lt;pod-name&gt;   0/1       Init:1/2   0          7s
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="查看初始化容器的详情" tabindex="-1"><a class="header-anchor" href="#查看初始化容器的详情" aria-hidden="true">#</a> 查看初始化容器的详情</h2><p>查看初始化容器的更多信息：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>kubectl describe pod <span class="token operator">&lt;</span>pod-name<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>假设 Pod 包含两个初始化容器，显示结果可能如下所示：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Init Containers:
  &lt;init-container-1&gt;:
    Container ID:    ...
    ...
    State:           Terminated
      Reason:        Completed
      Exit Code:     0
      Started:       ...
      Finished:      ...
    Ready:           True
    Restart Count:   0
    ...
  &lt;init-container-2&gt;:
    Container ID:    ...
    ...
    State:           Waiting
      Reason:        CrashLoopBackOff
    Last State:      Terminated
      Reason:        Error
      Exit Code:     1
      Started:       ...
      Finished:      ...
    Ready:           False
    Restart Count:   3
    ...
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以直接读取 Pod 的 <code>status.initContainerStatuses</code> 字段，命令行如下所示：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>kubectl get pod <span class="token operator">&lt;</span>pod-name<span class="token operator">&gt;</span> <span class="token parameter variable">--template</span> <span class="token string">&#39;{{.status.initContainerStatuses}}&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该命令将以 JSON 格式返回信息</p><h2 id="查看初始化容器的日志" tabindex="-1"><a class="header-anchor" href="#查看初始化容器的日志" aria-hidden="true">#</a> 查看初始化容器的日志</h2><p>执行命令查看初始化容器的日志：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>kubectl logs <span class="token operator">&lt;</span>pod-name<span class="token operator">&gt;</span> <span class="token parameter variable">-c</span> <span class="token operator">&lt;</span>init-container-<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="理解-pod-状态" tabindex="-1"><a class="header-anchor" href="#理解-pod-状态" aria-hidden="true">#</a> 理解 Pod 状态</h2><p>如果 Pod 的状态以 <code>Init:</code> 开头，表示该 Pod 正在执行初始化容器。下表描述了 Debug 初始化容器的过程中，一些可能出现的 Pod 状态：</p><table><thead><tr><th>状态</th><th>描述</th></tr></thead><tbody><tr><td><code>Init:N/M</code></td><td>Pod 中包含 M 个初始化容器，其中 N 个初始化容器已经成功执行</td></tr><tr><td><code>Init:Error</code></td><td>Pod 中有一个初始化容器执行失败</td></tr><tr><td><code>Init:CrashLoopBackOff</code></td><td>Pod 中有一个初始化容器反复执行失败</td></tr><tr><td><code>Pending</code></td><td>Pod 还未开始执行初始化容器</td></tr><tr><td><code>PodInitializing</code> or <code>Running</code></td><td>Pod 已经完成初始化容器的执行</td></tr></tbody></table>`,19);function _(k,f){const i=s("ExternalLinkIcon"),l=s("RouterLink"),d=s("router-link");return o(),c("div",null,[v,e("blockquote",null,[e("p",null,[n("参考文档： Kubernetes "),e("a",b,[n("Debug Init Containers"),a(i)])])]),m,e("p",null,[n("本文假设您已经完成了 "),a(l,{to:"/cloud/k8s/k8s-intermediate/workload/init-config.html"},{default:t(()=>[n("容器组_配置初始化容器")]),_:1})]),e("nav",h,[e("ul",null,[e("li",null,[a(d,{to:"#检查初始化容器的状态"},{default:t(()=>[n("检查初始化容器的状态")]),_:1})]),e("li",null,[a(d,{to:"#查看初始化容器的详情"},{default:t(()=>[n("查看初始化容器的详情")]),_:1})]),e("li",null,[a(d,{to:"#查看初始化容器的日志"},{default:t(()=>[n("查看初始化容器的日志")]),_:1})]),e("li",null,[a(d,{to:"#理解-pod-状态"},{default:t(()=>[n("理解 Pod 状态")]),_:1})])])]),g])}const C=r(p,[["render",_],["__file","init-debug.html.vue"]]);export{C as default};
