import{ab as r,G as d,H as c,E as e,S as s,N as a,ac as i,ad as t,W as l}from"./framework-894cff3a.js";const p={},u=e("h1",{id:"_3-3-3、容器组-初始化容器",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_3-3-3、容器组-初始化容器","aria-hidden":"true"},"#"),s(" 3.3.3、容器组_初始化容器")],-1),h=e("h2",{id:"初始化容器介绍",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#初始化容器介绍","aria-hidden":"true"},"#"),s(" 初始化容器介绍")],-1),k=e("p",null,"Pod 可以包含多个工作容器，也可以包含一个或多个初始化容器，初始化容器在工作容器启动之前执行。",-1),_=e("p",null,"初始化容器与工作容器完全相同，除了如下几点：",-1),m=e("li",null,"初始化容器总是运行并自动结束",-1),b=e("li",null,"kubelet 按顺序执行 Pod 中的初始化容器，前一个初始化容器成功结束后，下一个初始化容器才开始运行。所有的初始化容器成功执行后，才开始启动工作容器",-1),g=e("li",null,"如果 Pod 的任意一个初始化容器执行失败，kubernetes 将反复重启该 Pod，直到初始化容器全部成功（除非 Pod 的 restartPolicy 被设定为 Never）",-1),P=e("li",null,[s("初始化容器的 Resource request / limits 处理不同，请参考 "),e("a",{href:"#Resources"},"Resources")],-1),f=t(`<h2 id="使用初始化容器" tabindex="-1"><a class="header-anchor" href="#使用初始化容器" aria-hidden="true">#</a> 使用初始化容器</h2><p>初始化容器可以指定不同于工作容器的镜像，这使得初始化容器相较于直接在工作容器中编写启动相关的代码更有优势：</p><ul><li>初始化容器可以包含工作容器中没有的工具代码或者自定义代码。例如：您无需仅仅为了少量的 setup 工作（使用 sed, awk, python 或 dig 进行环境设定）而重新从一个基础镜像制作另外一个镜像</li><li>初始化容器可以更安全地执行某些使工作容器变得不安全的代码</li><li>应用程序的镜像构建者和部署者可以各自独立地工作，而无需一起构建一个镜像</li><li>初始化容器相较于工作容器，可以以另外一个视角处理文件系统。例如，他们可以拥有访问 Secrets 的权限，而工作容器却不一定被授予该权限</li><li>初始化容器在任何工作容器启动之前结束运行，这个特性使得我们可以阻止或者延迟工作容器的启动，直到某些前提条件得到满足。一旦前提条件满足，所有的工作容器将同时并行启动</li></ul><h3 id="examples" tabindex="-1"><a class="header-anchor" href="#examples" aria-hidden="true">#</a> Examples</h3><p>下面是一些使用初始化容器的例子：</p><ul><li><p>使用一行 shell 命令，等待某一个 Service 启动后再启动工作容器</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">..</span><span class="token number">100</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token keyword">do</span> <span class="token function">sleep</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token function">dig</span> myservice<span class="token punctuation">;</span> <span class="token keyword">then</span> <span class="token builtin class-name">exit</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token keyword">fi</span><span class="token punctuation">;</span> <span class="token keyword">done</span><span class="token punctuation">;</span> <span class="token builtin class-name">exit</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>使用 Pod 的信息将其注册到某一个远程服务：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token parameter variable">-X</span> POST http://<span class="token variable">$MANAGEMENT_SERVICE_HOST</span><span class="token builtin class-name">:</span><span class="token variable">$MANAGEMENT_SERVICE_PORT</span>/register <span class="token parameter variable">-d</span> <span class="token string">&#39;instance=$(&lt;POD_NAME&gt;)&amp;ip=$(&lt;POD_IP&gt;)&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>等候一定时间再启动工作容器</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sleep</span> <span class="token number">60</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>将 Git repository 克隆到一个数据卷</p></li><li><p>根据某些参数，运行一个模板工具动态生成工作容器所需要的配置文件</p></li></ul><h3 id="在-kuboard-中使用初始化容器" tabindex="-1"><a class="header-anchor" href="#在-kuboard-中使用初始化容器" aria-hidden="true">#</a> 在 Kuboard 中使用初始化容器</h3><p>Kuboard 工作负载编辑器中支持定义初始化容器，如下图所示，左下角可 <em><strong>添加初始化容器</strong></em> 初始化容器按照添加的顺序显示在容器组中，且始终显示在工作容器的前面。</p><figure><img src="https://didiplus.oss-cn-hangzhou.aliyuncs.com/image-20190907171451988.e6541888.png" alt="Kubernetes教程：在Kuboard中使用初始化容器" tabindex="0" loading="lazy"><figcaption>Kubernetes教程：在Kuboard中使用初始化容器</figcaption></figure><h2 id="初始化容器的行为" tabindex="-1"><a class="header-anchor" href="#初始化容器的行为" aria-hidden="true">#</a> 初始化容器的行为</h2>`,10),v=e("li",null,"Pod 的启动时，首先初始化网络和数据卷，然后按顺序执行每一个初始化容器。任何一个初始化容器都必须成功退出，才能开始下一个初始化容器。如果某一个容器启动失败或者执行失败，kubelet 将根据 Pod 的 restartPolicy 决定是否重新启动 Pod。",-1),y=e("code",null,"initializing",-1),x=e("code",null,"True",-1),w=e("li",null,"如果 Pod 重启，所有的初始化容器也将被重新执行。",-1),E=e("strong",null,"幂等",-1),N=e("li",null,"Pod 中不能包含两个同名的容器（初始化容器和工作容器也不能同名）。",-1),S=t('<h3 id="resources" tabindex="-1"><a class="header-anchor" href="#resources" aria-hidden="true">#</a> Resources</h3><p>在确定初始化容器的执行顺序以后，以下 resource 使用规则将适用：</p><ul><li>所有初始化容器中最高的 resource request/limit 是最终生效的 request/limit</li><li>对于 Pod 来说，最终生效的 resource request/limit 是如下几个当中较高的一个： <ul><li>所有工作容器某一个 resource request/limit 的和</li><li>最终生效的初始化容器的 request/limit 的和</li></ul></li><li>Kubelet 依据最终生效的 request/limit 执行调度，这意味着，在执行初始化容器时，就已经为 Pod 申请了其资源需求</li></ul><h3 id="pod-重启的原因" tabindex="-1"><a class="header-anchor" href="#pod-重启的原因" aria-hidden="true">#</a> Pod 重启的原因</h3><p>Pod 重启时，所有的初始化容器都会重新执行，Pod 重启的原因可能有：</p><ul><li>用户更新了 Pod 的定义，并改变了初始化容器的镜像 <ul><li>改变任何一个初始化容器的镜像，将导致整个 Pod 重启</li><li>改变工作容器的镜像，将只重启该工作容器，而不重启 Pod</li></ul></li><li>Pod 容器基础设施被重启（例如 docker engine），这种情况不常见，通常只有 node 节点的 root 用户才可以执行此操作</li><li>Pod 中所有容器都已经结束，restartPolicy 是 Always，且初始化容器执行的记录已经被垃圾回收，此时将重启整个 Pod</li></ul>',6);function R(K,q){const n=l("RouterLink"),o=l("Badge");return d(),c("div",null,[u,h,k,_,e("ul",null,[m,b,g,P,e("li",null,[s("初始化容器不支持 "),a(n,{to:"/cloud/k8s/k8s-intermediate/workload/pod-lifecycle.html#container-probes"},{default:i(()=>[s("就绪检查 readiness probe")]),_:1}),s("，因为初始化容器必须在 Pod ready 之前运行并结束")])]),f,e("ul",null,[v,e("li",null,[s("只有所有的初始化容器全都执行成功，Pod 才能进入 ready 状态。初始化容器的端口是不能够通过 kubernetes Service 访问的。Pod 在初始化过程中处于 Pending 状态，并且同时有一个 type 为 "),y,s(" status 为 "),x,s(" 的 "),a(n,{to:"/cloud/k8s/k8s-intermediate/workload/pod-lifecycle.html#pod-conditions"},{default:i(()=>[s("Condition")]),_:1})]),w,e("li",null,[s("您可以重启、重试、重新执行初始化容器，因此初始化容器中的代码必须是 "),E,s(" 的。具体来说，向 emptyDir 写入文件内容的代码应该考虑到该文件已经存在的情况。请参考 "),a(n,{to:"/glossary/idempotent.html"},{default:i(()=>[s("幂等")]),_:1}),s(" 获得更多信息")]),e("li",null,[s("您可以组合使用就绪检查和 activeDeadlineSeconds "),a(o,{text:"Kuboard 暂不支持",type:"warn"}),s("，以防止初始化容器始终失败。")]),N]),S])}const A=r(p,[["render",R],["__file","init-container.html.vue"]]);export{A as default};
