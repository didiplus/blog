import{ab as c,G as o,H as u,E as e,S as a,N as n,ac as s,ad as l,W as r}from"./framework-894cff3a.js";const p={},v=e("h1",{id:"_3-2-6、使用名称空间共享集群",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_3-2-6、使用名称空间共享集群","aria-hidden":"true"},"#"),a(" 3.2.6、使用名称空间共享集群")],-1),b={href:"https://kubernetes.io/docs/tasks/administer-cluster/namespaces/",target:"_blank",rel:"noopener noreferrer"},m=e("p",null,"本文描述了如何创建、查看、删除名称空间，以及如何使用名称空间。同时，本文还描述了如何通过名称空间切分集群。",-1),h=e("p",null,[e("strong",null,"难度等级"),a("：简单")],-1),g={class:"table-of-contents"},k=l(`<h2 id="查看名称空间" tabindex="-1"><a class="header-anchor" href="#查看名称空间" aria-hidden="true">#</a> 查看名称空间</h2><p>查看集群中的名称空间列表：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>kubectl get namespaces
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输出结果如下所示：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>NAME          STATUS    AGE
default       Active    11d
kube-system   Active    11d
kube-public   Active    11d
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Kubernetes 安装成功后，默认有初始化了三个名称空间：</p><ul><li><strong>default</strong> 默认名称空间，如果 Kubernetes 对象中不定义 <code>metadata.namespace</code> 字段，该对象将放在此名称空间下</li><li><strong>kube-system</strong> Kubernetes系统创建的对象放在此名称空间下</li><li><strong>kube-public</strong> 此名称空间自动在安装集群是自动创建，并且所有用户都是可以读取的（即使是那些未登录的用户）。主要是为集群预留的，例如，某些情况下，某些Kubernetes对象应该被所有集群用户看到。</li></ul><p>查看名称空间的概要信息：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>kubectl describe namespaces <span class="token operator">&lt;</span>name<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输出结果如下所示：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Name:           default
Labels:         &lt;none&gt;
Annotations:    &lt;none&gt;
Status:         Active

No resource quota.

Resource Limits
 Type       Resource    Min Max Default
 ----               --------    --- --- ---
 Container          cpu         -   -   100m
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>该结果中展示了 <a href="">Resource Quota</a> 和 <a href="">resource limit range</a></p></div><ul><li>Resource quota 汇总了名称空间中使用的资源总量，并指定了集群管理员定义该名称空间最多可以使用的资源量</li><li>Limit range 定义了名称空间中某种具体的资源类型的最大、最小值</li></ul><p>名称空间可能有两种状态（phase）：</p><ul><li><strong>Active</strong> 名称空间正在使用中</li><li><strong>Termining</strong> 名称空间正在被删除，不能再向其中创建新的对象</li></ul>`,15),x={href:"https://github.com/kubernetes/community/blob/master/contributors/design-proposals/architecture/namespaces.md#phases",target:"_blank",rel:"noopener noreferrer"},f=l(`<h2 id="创建名称空间" tabindex="-1"><a class="header-anchor" href="#创建名称空间" aria-hidden="true">#</a> 创建名称空间</h2><p>使用 kubectl 有两种方式可以创建名称空间</p><ul><li>通过 yaml 文件，创建文件 <code>my-namespace.yaml</code> 内容如下：<div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1
<span class="token key atrule">kind</span><span class="token punctuation">:</span> Namespace
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> &lt;名称空间的名字<span class="token punctuation">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>执行命令<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>kubectl create <span class="token parameter variable">-f</span> ./my-namespace.yaml
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li>直接使用命令创建名称空间：<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>kubectl create namespace <span class="token operator">&lt;</span>名称空间的名字<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><div class="hint-container tip"><p class="hint-container-title">提示</p><p>名称空间的名字必须与 DNS 兼容：</p><ul><li>不能带小数点 <code>.</code></li><li>不能带下划线 <code>_</code></li><li>使用数字、小写字母和减号 <code>-</code> 组成的字符串</li></ul></div>`,4),_=e("code",null,"finalizers",-1),A={href:"https://github.com/kubernetes/community/blob/master/contributors/design-proposals/architecture/namespaces.md#finalizers",target:"_blank",rel:"noopener noreferrer"},y=l(`<div class="hint-container danger"><p class="hint-container-title">警告</p><p>如果您定义了一个不存在的 <code>finalizer</code>，您仍然可以成功创建名称空间，但是当您删除该名称空间时，将卡在 <code>Terminating</code> 状态。</p></div><h2 id="删除名称空间" tabindex="-1"><a class="header-anchor" href="#删除名称空间" aria-hidden="true">#</a> 删除名称空间</h2><p>执行如下命令可删除名称空间：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>kubectl delete namespaces <span class="token operator">&lt;</span>名称空间的名字<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="hint-container danger"><p class="hint-container-title">警告</p><p>该操作将删除名称空间中的所有内容</p></div><p>此删除操作是异步的，您可能会观察到名称空间停留会在 <code>Terminating</code> 状态停留一段时间。</p><h2 id="使用名称空间切分集群" tabindex="-1"><a class="header-anchor" href="#使用名称空间切分集群" aria-hidden="true">#</a> 使用名称空间切分集群</h2><h3 id="理解-default-名称空间" tabindex="-1"><a class="header-anchor" href="#理解-default-名称空间" aria-hidden="true">#</a> 理解 <code>default</code> 名称空间</h3><p>默认情况下，安装Kubernetes集群时，会初始化一个 <code>default</code> 名称空间，用来将承载那些未指定名称空间的 Pod、Service、Deployment等对象</p><h3 id="创建新的名称空间" tabindex="-1"><a class="header-anchor" href="#创建新的名称空间" aria-hidden="true">#</a> 创建新的名称空间</h3><p>在此练习中，我们将创建两个 Kubernetes 名称空间。</p><p>假设企业使用同一个集群作为开发环境和生产环境（注意：通常开发环境和生产环境是物理隔绝的）：</p><ul><li>开发团队期望有一个集群中的空间，以便他们可以查看查看和使用他们创建的 Pod、Service、Deployment等。在此空间中，Kubernetes对象被创建又被删除，为了适应敏捷开发的过程，团队中的许多人都可以在此空间内做他们想做的事情。</li><li>运维团队也期望有一个集群中的空间，在这里，将有严格的流程控制谁可以操作 Pod、Service、Deployment等对象，因为这些对象都直接服务于生产环境。</li></ul><p>此时，该企业可以将一个Kubernetes集群切分成两个名称空间：<code>development</code> 和 <code>production</code>。创建名称空间的 yaml 文件如下所示：</p><p>&lt;&lt;&lt; @/.vuepress/public/statics/learning/namespace/dev.yaml</p><p>执行命令以创建 <code>development</code> 名称空间：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>kubectl create <span class="token parameter variable">-f</span> https://kuboard.cn/statics/learning/namespace/dev.yaml
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>执行命令以创建 <code>production</code> 名称空间：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>kubectl create <span class="token parameter variable">-f</span> https://kuboard.cn/statics/learning/namespace/prod.yaml
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>执行命令查看已创建的名称空间</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>kubectl get namespaces --show-labels
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输出结果如下所示</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>NAME          STATUS    AGE       LABELS
default       Active    32m       &lt;none&gt;
development   Active    29s       name=development
production    Active    23s       name=production
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="在每个名称空间中创建-pod" tabindex="-1"><a class="header-anchor" href="#在每个名称空间中创建-pod" aria-hidden="true">#</a> 在每个名称空间中创建 Pod</h3><p>Kubernetes名称空间为集群中的 Pod、Service、Deployment 提供了一个作用域。可以限定使用某个名称空间的用户不能看到另外一个名称空间中的内容。我们可以在 <code>development</code> 名称空间中创建一个简单的 Deployment 和 Pod 来演示这个特性。</p><ul><li><p>首先，执行命令以检查当前的 <a href="">kubectl 上下文</a></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>kubectl config view
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输出结果如下所示：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>apiVersion: v1
clusters:
- cluster:
    certificate-authority-data: REDACTED
    server: https://130.211.122.180
  name: lithe-cocoa-92103_kubernetes
contexts:
- context:
    cluster: lithe-cocoa-92103_kubernetes
    user: lithe-cocoa-92103_kubernetes
  name: lithe-cocoa-92103_kubernetes
current-context: lithe-cocoa-92103_kubernetes
kind: Config
preferences: {}
users:
- name: lithe-cocoa-92103_kubernetes
  user:
    client-certificate-data: REDACTED
    client-key-data: REDACTED
    token: 65rZW78y8HbwXXtSXuUw9DbP4FLjHi4b
- name: lithe-cocoa-92103_kubernetes-basic-auth
  user:
    password: h5M0FtUUIflBSdI7
    username: admin
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>kubectl config current-context
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输出结果如下所示</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>lithe-cocoa-92103_kubernetes
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>接下来，为 kubectl 定义一个上下文，以便在不同的名称空间中工作。<code>cluster</code> 和 <code>user</code> 字段的取值从前面的 current context 复制过来：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>kubectl config set-context dev <span class="token parameter variable">--namespace</span><span class="token operator">=</span>development <span class="token parameter variable">--cluster</span><span class="token operator">=</span>lithe-cocoa-92103_kubernetes <span class="token parameter variable">--user</span><span class="token operator">=</span>lithe-cocoa-92103_kubernetes
kubectl config set-context prod <span class="token parameter variable">--namespace</span><span class="token operator">=</span>production <span class="token parameter variable">--cluster</span><span class="token operator">=</span>lithe-cocoa-92103_kubernetes <span class="token parameter variable">--user</span><span class="token operator">=</span>lithe-cocoa-92103_kubernetes
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的命令创建了两个 kubectl 的上下文，使得您可以在两个不同的名称空间中工作：</p></li><li><p>切换到 <code>development</code> 名称空间：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>kubectl config use-context dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>验证</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>kubectl config current-context
dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>此时，通过 kubectl 向 Kubernetes 集群发出的所有指令都限定在名称空间 <code>development</code> 里</p><p>创建一个 nginx</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>kubectl run snowflake <span class="token parameter variable">--image</span><span class="token operator">=</span>nginx:1.7.9 <span class="token parameter variable">--replicas</span><span class="token operator">=</span><span class="token number">2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>刚刚创建的 Deployment 副本数为 2，运行了一个 nginx 容器。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>kubectl get deployment
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输出结果如下</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>NAME        DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE
snowflake   2         2         2            2           2m
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>执行命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>kubectl get pods <span class="token parameter variable">-l</span> <span class="token assign-left variable">run</span><span class="token operator">=</span>snowflake
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输出结果如下</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>NAME                         READY     STATUS    RESTARTS   AGE
snowflake-3968820950-9dgr8   1/1       Running   0          2m
snowflake-3968820950-vgc4n   1/1       Running   0          2m
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时，开发人员可以做任何他想要做的操作，所有操作都限定在名称空间 <code>development</code> 里，而无需担心影响到 <code>production</code> 名称空间中的内容。</p></li><li><p>切换到 <code>production</code> 名称空间：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>kubectl config use-context prod
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>production</code> 名称空间应该是空的，下面两个命令将返回的结果都应该为空：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>kubectl get deployment
kubectl get pods
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>此时，我们在 production 名称空间运行另一个 deployment：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>kubectl run cattle <span class="token parameter variable">--image</span><span class="token operator">=</span>nginx:1.7.9 <span class="token parameter variable">--replicas</span><span class="token operator">=</span><span class="token number">5</span>
kubectl get deployment
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果如下所示：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>NAME      DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE
cattle    5         5         5            5           10s
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>执行命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>kubectl get pods <span class="token parameter variable">-l</span> <span class="token assign-left variable">run</span><span class="token operator">=</span>cattle
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输出结果如下所示：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>NAME                      READY     STATUS    RESTARTS   AGE
cattle-2263376956-41xy6   1/1       Running   0          34s
cattle-2263376956-kw466   1/1       Running   0          34s
cattle-2263376956-n4v97   1/1       Running   0          34s
cattle-2263376956-p5p3i   1/1       Running   0          34s
cattle-2263376956-sxpth   1/1       Running   0          34s
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>至此，我们可以了解到，用户在一个名称空间创建的内容对于另外一个名称空间来说是不可见的。</p><p>也可以为不同的名称空间定义不同的访问权限控制。敬请期待后续更新。</p><!-- FIXME --></li></ul><h2 id="为什么需要名称空间" tabindex="-1"><a class="header-anchor" href="#为什么需要名称空间" aria-hidden="true">#</a> 为什么需要名称空间</h2><p>一个Kubernetes集群应该可以满足多组用户的不同需要。Kubernetes名称空间可以使不同的项目、团队或客户共享同一个 Kubernetes 集群。实现的方式是，提供：</p>`,28),E=l("<p>每一个用户组都期望独立于其他用户组进行工作。通过名称空间，每个用户组拥有自己的：</p><ul><li>Kubernetes 对象（Pod、Service、Deployment等）</li><li>授权（谁可以在该名称空间中执行操作）</li><li>资源分配（该用户组或名称空间可以使用集群中的多少计算资源）</li></ul><p>可能的使用情况有：</p><ul><li>集群管理员通过一个Kubernetes集群支持多个用户组</li><li>集群管理员将集群中某个名称空间的权限分配给用户组中的受信任的成员</li><li>集群管理员可以限定某一个用户组可以消耗的资源数量，以避免其他用户组受到影响</li><li>集群用户可以使用自己的Kubernetes对象，而不会与集群中的其他用户组相互干扰</li></ul>",4);function R(S,T){const d=r("ExternalLinkIcon"),i=r("router-link"),t=r("RouterLink");return o(),u("div",null,[v,e("blockquote",null,[e("p",null,[a("参考文档： "),e("a",b,[a("Share a Cluster with Namespaces"),n(d)])])]),m,h,e("nav",g,[e("ul",null,[e("li",null,[n(i,{to:"#查看名称空间"},{default:s(()=>[a("查看名称空间")]),_:1})]),e("li",null,[n(i,{to:"#创建名称空间"},{default:s(()=>[a("创建名称空间")]),_:1})]),e("li",null,[n(i,{to:"#删除名称空间"},{default:s(()=>[a("删除名称空间")]),_:1})]),e("li",null,[n(i,{to:"#使用名称空间切分集群"},{default:s(()=>[a("使用名称空间切分集群")]),_:1}),e("ul",null,[e("li",null,[n(i,{to:"#理解-default-名称空间"},{default:s(()=>[a("理解 default 名称空间")]),_:1})]),e("li",null,[n(i,{to:"#创建新的名称空间"},{default:s(()=>[a("创建新的名称空间")]),_:1})]),e("li",null,[n(i,{to:"#在每个名称空间中创建-pod"},{default:s(()=>[a("在每个名称空间中创建 Pod")]),_:1})])])]),e("li",null,[n(i,{to:"#为什么需要名称空间"},{default:s(()=>[a("为什么需要名称空间")]),_:1})])])]),k,e("p",null,[a("更多信息请参考 "),e("a",x,[a("phases"),n(d)])]),f,e("p",null,[a("名称空间可以定义一个可选项字段 "),_,a("，在名称空间被删除时，用来清理相关的资源。 更多信息请参考 "),e("a",A,[a("Finalizers"),n(d)])]),y,e("ul",null,[e("li",null,[n(t,{to:"/cloud/k8s/k8s-intermediate/obj/names.html"},{default:s(()=>[a("名称")]),_:1}),a(" 的作用域")]),e("li",null,[a("为不同的名称空间定义不同的授权方式和资源分配策略 "),n(t,{to:"/learning/k8s-advanced/policy/rq.html"},{default:s(()=>[a("Resource Quota")]),_:1}),a(" 和 "),n(t,{to:"/learning/k8s-advanced/policy/lr.html"},{default:s(()=>[a("resource limit range")]),_:1})])]),E])}const N=c(p,[["render",R],["__file","namespace-op.html.vue"]]);export{N as default};
