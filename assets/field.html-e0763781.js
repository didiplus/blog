import{ab as e,G as a,H as s,ad as d}from"./framework-b31a425c.js";const t={},n=d(`<h1 id="_3-2-7、字段选择器" tabindex="-1"><a class="header-anchor" href="#_3-2-7、字段选择器" aria-hidden="true">#</a> 3.2.7、字段选择器</h1><h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述" aria-hidden="true">#</a> 概述</h2><p>字段选择器（Field Selector）可以用来基于的一个或多个字段的取值来选取一组Kubernetes对象。下面有一些示例性的字段选择器：</p><ul><li><code>metadata.name=my-service</code></li><li><code>metadata.namespace!=default</code></li><li><code>status.phase=Pending</code></li></ul><p>下面的 <code>kubectl</code> 命令选择了所有字段 <code>status.phase</code> 的取值为 <code>Running</code> 的 Pod：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>kubectl get pods --field-selector <span class="token assign-left variable">status.phase</span><span class="token operator">=</span>Running
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>字段选择器本质上是一个 <code>filter</code>。默认情况下，没有添加 selector/filter 时，代表着指定资源类型的所有对象都被选中。下面个两个 kubectl 查询时等价的：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>kubectl get pods
kubectl get pods --field-selector <span class="token string">&quot;&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></div><h2 id="支持的字段" tabindex="-1"><a class="header-anchor" href="#支持的字段" aria-hidden="true">#</a> 支持的字段</h2><p>不同的 Kubernetes 对象类型，可以用来查询的字段不一样。所有的对象类型都支持的两个字段是 <code>metadata.name</code> 和 <code>metadata.namespace</code>。在字段选择器中使用不支持的字段，将报错。例如：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>kubectl get ingress --field-selector <span class="token assign-left variable">foo.bar</span><span class="token operator">=</span>baz
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输出结果为：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Error from server (BadRequest): Unable to find &quot;ingresses&quot; that match label selector &quot;&quot;, field selector &quot;foo.bar=baz&quot;: &quot;foo.bar&quot; is not a known field selector: only &quot;metadata.name&quot;, &quot;metadata.namespace&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="支持的操作符" tabindex="-1"><a class="header-anchor" href="#支持的操作符" aria-hidden="true">#</a> 支持的操作符</h2><p>字段选择器中可以使用的操作符有 <code>=</code>、<code>==</code>、<code>!=</code> （<code>=</code> 和 <code>==</code> 含义相同）。例如，下面的 <code>kubectl</code> 命令，查询不在 <code>default</code> 名称空间中的 Service：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>kubectl get services  --all-namespaces --field-selector metadata.namespace<span class="token operator">!=</span>default
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="多选择器" tabindex="-1"><a class="header-anchor" href="#多选择器" aria-hidden="true">#</a> 多选择器</h2><p>可以指定多个字段选择器，用逗号 <code>,</code> 分隔。下面的 <code>kubectl</code> 命令查询所有的 <code>status.phase</code> 不等于 <code>Running</code> 且 <code>spec.restartPolicy</code> 等于 <code>Always</code> 的 Pod：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>kubectl get pods --field-selector<span class="token operator">=</span>status.phase<span class="token operator">!=</span>Running,spec.restartPolicy<span class="token operator">=</span>Always
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="多种对象类型" tabindex="-1"><a class="header-anchor" href="#多种对象类型" aria-hidden="true">#</a> 多种对象类型</h2><p>字段选择器可以跨资源类型使用。下面的 <code>kubectl</code> 命令查询所有的不在 <code>default</code> 名称空间的 StatefulSet 和 Service：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>kubectl get statefulsets,services --all-namespaces --field-selector metadata.namespace<span class="token operator">!=</span>default
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,21),c=[n];function o(i,l){return a(),s("div",null,c)}const u=e(t,[["render",o],["__file","field.html.vue"]]);export{u as default};
