import{ab as l,G as i,H as c,E as a,S as e,N as n,ac as t,ad as r,W as d}from"./framework-894cff3a.js";const o={},p=r('<h1 id="_3-2-4、名称空间" tabindex="-1"><a class="header-anchor" href="#_3-2-4、名称空间" aria-hidden="true">#</a> 3.2.4、名称空间</h1><blockquote><p>参考文档：</p></blockquote><p>Kubernetes通过名称空间（namespace）在同一个物理集群上支持多个虚拟集群。</p><ul><li><a href="#324%E5%90%8D%E7%A7%B0%E7%A9%BA%E9%97%B4">3.2.4、名称空间</a><ul><li><a href="#%E4%BD%95%E6%97%B6%E4%BD%BF%E7%94%A8%E5%90%8D%E7%A7%B0%E7%A9%BA%E9%97%B4">何时使用名称空间</a></li><li><a href="#%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E5%90%8D%E7%A7%B0%E7%A9%BA%E9%97%B4">如何使用名称空间</a><ul><li><a href="#%E6%9F%A5%E7%9C%8B%E5%90%8D%E7%A7%B0%E7%A9%BA%E9%97%B4">查看名称空间</a></li><li><a href="#%E5%9C%A8%E6%89%A7%E8%A1%8C%E8%AF%B7%E6%B1%82%E6%97%B6%E8%AE%BE%E5%AE%9Anamespace">在执行请求时设定namespace</a></li><li><a href="#%E8%AE%BE%E7%BD%AE%E5%90%8D%E7%A7%B0%E7%A9%BA%E9%97%B4%E5%81%8F%E5%A5%BD">设置名称空间偏好</a></li></ul></li><li><a href="#%E5%90%8D%E7%A7%B0%E7%A9%BA%E9%97%B4%E4%B8%8Edns">名称空间与DNS</a></li><li><a href="#%E5%B9%B6%E9%9D%9E%E6%89%80%E6%9C%89%E5%AF%B9%E8%B1%A1%E9%83%BD%E5%9C%A8%E5%90%8D%E7%A7%B0%E7%A9%BA%E9%97%B4%E9%87%8C">并非所有对象都在名称空间里</a></li></ul></li></ul><h2 id="何时使用名称空间" tabindex="-1"><a class="header-anchor" href="#何时使用名称空间" aria-hidden="true">#</a> 何时使用名称空间</h2><p>名称空间的用途是，为不同团队的用户（或项目）提供虚拟的集群空间，也可以用来区分开发环境/测试环境、准上线环境/生产环境。</p>',6),u=a("p",null,"在 Kubernetes 将来的版本中，同名称空间下的对象将默认使用相同的访问控制策略。",-1),m=a("h2",{id:"如何使用名称空间",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#如何使用名称空间","aria-hidden":"true"},"#"),e(" 如何使用名称空间")],-1),h=r(`<h3 id="查看名称空间" tabindex="-1"><a class="header-anchor" href="#查看名称空间" aria-hidden="true">#</a> 查看名称空间</h3><p>执行命令 <code>kubectl get namespaces</code> 可以查看名称空间，输出结果如下所示：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>NAME          STATUS    AGE
default       Active    1d
kube-system   Active    1d
kube-public   Active    1d
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Kubernetes 安装成功后，默认有初始化了三个名称空间：</p><ul><li><strong>default</strong> 默认名称空间，如果 Kubernetes 对象中不定义 <code>metadata.namespace</code> 字段，该对象将放在此名称空间下</li><li><strong>kube-system</strong> Kubernetes系统创建的对象放在此名称空间下</li><li><strong>kube-public</strong> 此名称空间自动在安装集群是自动创建，并且所有用户都是可以读取的（即使是那些未登录的用户）。主要是为集群预留的，例如，某些情况下，某些Kubernetes对象应该被所有集群用户看到。</li></ul><h3 id="在执行请求时设定namespace" tabindex="-1"><a class="header-anchor" href="#在执行请求时设定namespace" aria-hidden="true">#</a> 在执行请求时设定namespace</h3><p>执行 kubectl 命令时，可以使用 <code>--namespace</code> 参数指定名称空间，例如：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>kubectl run nginx <span class="token parameter variable">--image</span><span class="token operator">=</span>nginx <span class="token parameter variable">--namespace</span><span class="token operator">=</span><span class="token operator">&lt;</span>您的名称空间<span class="token operator">&gt;</span>
kubectl get pods <span class="token parameter variable">--namespace</span><span class="token operator">=</span><span class="token operator">&lt;</span>您的名称空间<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="设置名称空间偏好" tabindex="-1"><a class="header-anchor" href="#设置名称空间偏好" aria-hidden="true">#</a> 设置名称空间偏好</h3><p>可以通过 <code>set-context</code> 命令改变当前 <a href="">kubectl 上下文</a> 的名称空间，后续所有命令都默认在此名称空间下执行。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>kubectl config set-context <span class="token parameter variable">--current</span> <span class="token parameter variable">--namespace</span><span class="token operator">=</span><span class="token operator">&lt;</span>您的名称空间<span class="token operator">&gt;</span>
<span class="token comment"># 验证结果</span>
kubectl config view <span class="token parameter variable">--minify</span> <span class="token operator">|</span> <span class="token function">grep</span> namespace:
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="名称空间与dns" tabindex="-1"><a class="header-anchor" href="#名称空间与dns" aria-hidden="true">#</a> 名称空间与DNS</h2><p>当您创建一个 Service 时，Kubernetes 为其创建一个对应的 <a href="">DNS 条目</a>。该 DNS 记录的格式为 <code>&lt;service-name&gt;.&lt;namespace-name&gt;.svc.cluster.local</code>，也就是说，如果在容器中只使用 <code>&lt;service-name&gt;</code>，其DNS将解析到同名称空间下的 Service。这个特点在多环境的情况下非常有用，例如将开发环境、测试环境、生产环境部署在不同的名称空间下，应用程序只需要使用 <code>&lt;service-name&gt;</code> 即可进行服务发现，无需为不同的环境修改配置。如果您想跨名称空间访问服务，则必须使用完整的域名（fully qualified domain name，FQDN）。</p><h2 id="并非所有对象都在名称空间里" tabindex="-1"><a class="header-anchor" href="#并非所有对象都在名称空间里" aria-hidden="true">#</a> 并非所有对象都在名称空间里</h2>`,14),b=a("a",{href:""},"persistentVolumes",-1),E=a("a",{href:""},"storageClass",-1),v=r(`<p>执行一下命令可查看哪些 Kubernetes 对象在名称空间里，哪些不在：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 在名称空间里</span>
kubectl api-resources <span class="token parameter variable">--namespaced</span><span class="token operator">=</span>true

<span class="token comment"># 不在名称空间里</span>
kubectl api-resources <span class="token parameter variable">--namespaced</span><span class="token operator">=</span>false
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2);function k(B,A){const s=d("RouterLink");return i(),c("div",null,[p,a("p",null,[e("名称空间为 "),n(s,{to:"/cloud/k8s/k8s-intermediate/obj/names.html"},{default:t(()=>[e("名称")]),_:1}),e(" 提供了作用域。名称空间内部的同类型对象不能重名，但是跨名称空间可以有同名同类型对象。名称空间不可以嵌套，任何一个Kubernetes对象只能在一个名称空间中。")]),a("p",null,[e("名称空间可以用来在不同的团队（用户）之间划分集群的资源，参考 "),n(s,{to:"/learning/k8s-advanced/policy/rq.html"},{default:t(()=>[e("resource quota")]),_:1})]),u,a("p",null,[e("当KUbernetes对象之间的差异不大时，无需使用名称空间来区分，例如，同一个软件的不同版本，只需要使用 "),n(s,{to:"/cloud/k8s/k8s-intermediate/obj/labels.html"},{default:t(()=>[e("labels")]),_:1}),e(" 来区分即可。")]),m,a("p",null,[e("参考 "),n(s,{to:"/cloud/k8s/k8s-intermediate/obj/namespace-op.html"},{default:t(()=>[e("管理名称空间")]),_:1}),e(" 了解如何创建和删除名称空间。")]),h,a("p",null,[e("大部分的 Kubernetes 对象（例如，Pod、Service、Deployment、StatefulSet等）都必须在名称空间里。但是某些更低层级的对象，是不在任何名称空间中的，例如 "),n(s,{to:"/cloud/k8s/k8s-intermediate/architecture/nodes.html"},{default:t(()=>[e("nodes")]),_:1}),e("、"),b,e("、"),E,e(" 等")]),v])}const g=l(o,[["render",k],["__file","namespaces.html.vue"]]);export{g as default};
