import{ab as i,G as c,H as u,E as s,S as e,N as t,ac as r,ad as o,W as n}from"./framework-b31a425c.js";const d={},k=s("h1",{id:"_2-0、学习kubernetes基础知识",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_2-0、学习kubernetes基础知识","aria-hidden":"true"},"#"),e(" 2.0、学习Kubernetes基础知识")],-1),h={href:"https://kubernetes.io/docs/tutorials/kubernetes-basics/",target:"_blank",rel:"noopener noreferrer"},p=o('<p>相信很多初学者在入门 Kubernetes (以下简称k8s)时，都会被各种英文单词所困扰(例如：Deployment、Pod、Service等)，这些名词在被翻译后也往往失去了原意，更不能体现出他们的相互关系。笔者在刚开始学习k8s时也遭遇到这种困境。但是，任何复杂的系统都是发源于最基本的公式或定理，k8s虽然庞大且复杂，不过只要抓住一些基本的脉络(一些最基本的组件的定义及使用)，入门便也是毫不费劲。</p><p>本文基于k8s官方基础教程，从现实运维使用场景出发，结合上述新手入门困境，基于基本组件的定义、功能和使用角度进行讲解，帮助新手在最小化复杂度的前提下上手k8s。</p><h2 id="学习目标" tabindex="-1"><a class="header-anchor" href="#学习目标" aria-hidden="true">#</a> 学习目标</h2><ul><li>在k8s集群上部署应用程序</li><li>对应用程序进行扩容缩容（多实例）</li><li>对应用程序进行版本更新</li><li>使用k8s工具排查部署问题</li></ul><h2 id="kubernetes功能" tabindex="-1"><a class="header-anchor" href="#kubernetes功能" aria-hidden="true">#</a> Kubernetes功能</h2><p>官方定义k8s能够对容器化软件进行部署管理，在不停机的前提下提供简单快速的发布和更新方式。换句话说，如果项目需要多机器节点的微服务架构，并且采用Docker image（镜像）进行容器化部署，那么k8s可以帮助我们屏蔽掉集群的复杂性，自动选择最优资源分配方式进行部署。在此基础上，k8s还提供简单的多实例部署及更新方案，仅需几个操作命令就可以轻松实现。</p><h2 id="kubernetes-入门目录" tabindex="-1"><a class="header-anchor" href="#kubernetes-入门目录" aria-hidden="true">#</a> Kubernetes 入门目录</h2>',7),b=o('<h2 id="k8s集群简单介绍" tabindex="-1"><a class="header-anchor" href="#k8s集群简单介绍" aria-hidden="true">#</a> k8s集群简单介绍</h2><p>本篇中我们先从第一部分入手，对k8s集群有个整体上的把握。</p><figure><img src="https://kuboard.cn/assets/img/module_01.f6dc9f93.svg" alt="Kubernetes集群" tabindex="0" loading="lazy"><figcaption>Kubernetes集群</figcaption></figure><p>上图描述的是拥有一个Master(主)节点和六个Worker(工作)节点的k8s集群</p><figure><img src="https://kuboard.cn/assets/img/module_01_cluster.8f54b2c5.svg" alt="Kubernetes教程：学习Kubernetes基础知识" tabindex="0" loading="lazy"><figcaption>Kubernetes教程：学习Kubernetes基础知识</figcaption></figure><p><strong>Master 负责管理集群</strong> 负责协调集群中的所有活动，例如调度应用程序，维护应用程序的状态，扩展和更新应用程序。</p><p><strong>Worker节点(即图中的Node)是VM(虚拟机)或物理计算机，充当k8s集群中的工作计算机。</strong> 每个Worker节点都有一个Kubelet，它管理该Worker节点并负责与Master节点通信。该Worker节点还应具有用于处理容器操作的工具，例如Docker。</p><p>~~恭喜你，新成就达成，是不是很简单，</p><p>~~初学仅需对主要概念有个整体且正确的把握即可，让我们继续吧</p>',9);function _(f,g){const l=n("ExternalLinkIcon"),a=n("RouterLink");return c(),u("div",null,[k,s("p",null,[e("本文翻译自 Kubernetes "),s("a",h,[e("Learn Kubernetes Basics"),t(l)]),e(" ，并有所改写")]),p,s("ul",null,[s("li",null,[t(a,{to:"/cloud/k8s/k8s-basics/deploy-app.html"},{default:r(()=>[e("01.部署第一个应用程序")]),_:1}),e(" 5分钟")]),s("li",null,[t(a,{to:"/cloud/k8s/k8s-basics/explore.html"},{default:r(()=>[e("02.查看 Pods / Nodes")]),_:1}),e(" 10分钟")]),s("li",null,[t(a,{to:"/cloud/k8s/k8s-basics/expose.html"},{default:r(()=>[e("03.公布应用程序")]),_:1}),e(" 10分钟")]),s("li",null,[t(a,{to:"/cloud/k8s/k8s-basics/scale.html"},{default:r(()=>[e("04.伸缩应用程序")]),_:1}),e(" 10分钟")]),s("li",null,[t(a,{to:"/cloud/k8s/k8s-basics/update.html"},{default:r(()=>[e("05.执行滚动更新")]),_:1}),e(" 10分钟")])]),b,s("p",null,[e("~~let‘s go-> "),t(a,{to:"/cloud/k8s/k8s-basics/deploy-app.html"},{default:r(()=>[e("部署第一个应用程序")]),_:1})])])}const x=i(d,[["render",_],["__file","kubernetes-basics.html.vue"]]);export{x as default};
