import{ab as n,G as a,H as e,ad as s}from"./framework-b31a425c.js";const t={},l=s(`<h1 id="_3-2-7、注解annotation" tabindex="-1"><a class="header-anchor" href="#_3-2-7、注解annotation" aria-hidden="true">#</a> 3.2.7、注解annotation</h1><p>注解（annotation）可以用来向 Kubernetes 对象的 <code>metadata.annotations</code> 字段添加任意的信息。Kubernetes 的客户端或者自动化工具可以存取这些信息以实现其自定义的逻辑。</p><h2 id="向kubernetes对象添加注解" tabindex="-1"><a class="header-anchor" href="#向kubernetes对象添加注解" aria-hidden="true">#</a> 向Kubernetes对象添加注解</h2><p>Kubernetes 对象的 <code>metadata</code> 字段可以添加自定义的标签（label）或者注解（annotation）。标签用来选择对象或者用来查找符合指定条件的一组对象。与此相对，注解不是用来标记对象或者选择对象的。<code>metadata</code> 中的注解可以很大，也可以很小；可以是结构化的，也可以是非结构化的；还可以包括标签中不允许出现的字符。</p><p>与标签相似，注解也是 key/value map，例如：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">annotations</span><span class="token punctuation">:</span>
    <span class="token key atrule">key1</span><span class="token punctuation">:</span> value1
    <span class="token key atrule">key2</span><span class="token punctuation">:</span> value2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>类似于下面的信息可以记录在注解中：</p><ul><li>声明式配置层用到的状态信息。</li><li>Build、release、image信息，例如 timestamp、release ID、git branch、PR number、image hash、registry address</li><li>日志、监控、分析、审计系统的参数</li><li>第三方工具所需要的信息，例如 name、version、build information、URL</li><li>轻量级的发布工具用到的信息，例如，config、checkpoint</li><li>负责人的联系方式，例如，电话号码、网址、电子信箱</li><li>用户用来记录备忘信息的说明，例如，对标准镜像做了什么样的修改、维护过程中有什么特殊信息需要记住</li></ul><p>下面是一个来自于实际 Deployment 的注解：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">annotations</span><span class="token punctuation">:</span>
    <span class="token key atrule">deployment.kubernetes.io/revision</span><span class="token punctuation">:</span> <span class="token number">7</span>  <span class="token comment"># 由Deployment控制器添加，用于记录当前发布的修改次数</span>
    <span class="token key atrule">k8s.eip.work/displayName</span><span class="token punctuation">:</span> busybox   <span class="token comment"># Kuboard添加，Deployment显示在Kuboard界面上的名字</span>
    <span class="token key atrule">k8s.eip.work/ingress</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>     <span class="token comment"># Kuboard添加，根据此参数显示Deployment是否配置了Ingress</span>
    <span class="token key atrule">k8s.eip.work/service</span><span class="token punctuation">:</span> none      <span class="token comment"># Kuboard添加，根据此参数显示Deployment是否配置了Service</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除了使用注解，您也可以将这类信息存放在一个外部的数据库，然而，在使用、分享这些信息的时候，可能会变得难以管理。</p><h2 id="句法和字符集" tabindex="-1"><a class="header-anchor" href="#句法和字符集" aria-hidden="true">#</a> 句法和字符集</h2><p>注解是一组名值对。</p><p>注解的 key 有两个部分：可选的前缀和标签名，通过 <code>/</code> 分隔。</p><ul><li>注解名： <ul><li>标签名部分是必须的</li><li>不能多于 63 个字符</li><li>必须由字母、数字开始和结尾</li><li>可以包含字母、数字、减号<code>-</code>、下划线<code>_</code>、小数点<code>.</code></li></ul></li><li>注解前缀： <ul><li>注解前缀部分是可选的</li><li>如果指定，必须是一个DNS的子域名，例如：k8s.eip.work</li><li>不能多于 253 个字符</li><li>使用 <code>/</code> 和标签名分隔</li></ul></li></ul><p>如果省略注解前缀，则注解的 key 将被认为是专属于用户的。Kubernetes的系统组件（例如，kube-scheduler、kube-controller-manager、kube-apiserver、kubectl 或其他第三方组件）向用户的Kubernetes对象添加注解时，必须指定一个前缀。</p><p><code>kubernetes.io/</code> 和 <code>k8s.io/</code> 这两个前缀是 Kubernetes 核心组件预留的。Kuboard 使用 <code>k8s.eip.work</code> 这个前缀。</p><p>下面的例子中，Pod包含一个注解 <code>imageregistry: https://hub.docker.com/</code></p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1
<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> annotations<span class="token punctuation">-</span>demo
  <span class="token key atrule">annotations</span><span class="token punctuation">:</span>
    <span class="token key atrule">imageregistry</span><span class="token punctuation">:</span> <span class="token string">&quot;https://hub.docker.com/&quot;</span>
<span class="token key atrule">spec</span><span class="token punctuation">:</span>
  <span class="token key atrule">containers</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx
    <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx<span class="token punctuation">:</span>1.7.9
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,19),i=[l];function o(p,c){return a(),e("div",null,i)}const d=n(t,[["render",o],["__file","annotations.html.vue"]]);export{d as default};
