import{ab as a,G as s,H as c,E as t,S as e,N as o,ac as n,ad as l,W as r}from"./framework-894cff3a.js";const p={},u=t("h1",{id:"_3-3-6、容器组-毁坏disruptions",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#_3-3-6、容器组-毁坏disruptions","aria-hidden":"true"},"#"),e(" 3.3.6、容器组_毁坏Disruptions")],-1),h={href:"https://kubernetes.io/docs/concepts/workloads/pods/disruptions/",target:"_blank",rel:"noopener noreferrer"},m=l('<p>本文面向想要构建高可用的应用程序的应用程序管理员，为此，您需要理解有哪些毁坏（disruption）可能发生在Pod上。</p><p>本文也是为集群管理员准备的，如果集群管理员想要将集群的部分管理任务自动化的话，例如，升级、自动伸缩等。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>Disruption ---&gt; 毁坏。 暂时没想到合适的词，如果您有想法，请联系我。</p></div><h2 id="自愿的和非自愿的毁坏" tabindex="-1"><a class="header-anchor" href="#自愿的和非自愿的毁坏" aria-hidden="true">#</a> 自愿的和非自愿的毁坏</h2><p>除非有人（人或者控制器）销毁Pod，或者出现不可避免的硬件/软件故障，Pod不会凭空消失。此类不可避免的情况，我们称之为非自愿的毁坏（involuntary disruption）。例如：</p><ul><li>节点所在物理机的硬件故障</li><li>集群管理员误删了虚拟机</li><li>云供应商或管理程序故障导致虚拟机被删</li><li>Linux 内核故障</li><li>集群所在的网络发生分片，导致节点不可用</li><li>节点资源耗尽，导致 Pod 被驱逐</li></ul><p>除了节点资源耗尽这种情况以外，大部分人对其他情况都十分熟悉，因为这并不是 Kubernetes 所特有的情况。</p><p>还有一类毁坏，我们称之为自愿的毁坏（voluntary disruptions）。主要包括由应用管理员或集群管理员主动执行的操作。应用管理员可能执行的操作有：</p><ul><li>删除 Deployment 或其他用于管理 Pod 的控制器</li><li>修改 Deployment 中 Pod 模板的定义，导致 Pod 重启</li><li>直接删除一个 Pod</li></ul><p>集群管理员可能执行的操作有：</p>',10),g={href:"https://kubernetes.io/docs/tasks/administer-cluster/safely-drain-node/",target:"_blank",rel:"noopener noreferrer"},b=t("li",null,"排空节点，以将集群缩容",-1),_=t("li",null,"从节点上删除某个 Pod，以使得其他的 Pod 能够调度到该节点上",-1),P=t("p",null,"这些操作可能直接由集群管理员执行，或者由执行管理员运行的自动化脚本执行，也可能由您的集群托管商执行。",-1),f=t("p",null,"向您的集群管理员、云供应商询问，您的集群是否激活了任何形式的自愿的毁坏。如果没有激活，您无需创建 Pod Disruption Budgets。",-1),D=t("div",{class:"hint-container danger"},[t("p",{class:"hint-container-title"},"警告"),t("p",null,"并非所有自愿的毁坏都受 Pod Disruption Budgets 限制，例如，删除 Deployment 或 Pod。")],-1),y=t("h2",{id:"处理毁坏-disruptions",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#处理毁坏-disruptions","aria-hidden":"true"},"#"),e(" 处理毁坏（Disruptions）")],-1),k=t("p",null,"弥补非自愿的毁坏可以采取的方法有：",-1),v={href:"https://kubernetes.io/docs/setup/multiple-zones",target:"_blank",rel:"noopener noreferrer"},B=l('<p>自愿的毁坏，发生频率不定。在一个基础的 Kubernetes 集群中，可能不会发生自愿的毁坏。当你的集群管理员或者托管供应商运行某些额外的服务是可能导致自愿的毁坏发生。例如：</p><ul><li>更新节点上的软件</li><li>自定义实现的自动伸缩程序</li></ul><p>集群管理员或托管供应商应该为您提供这方面的文档。</p><p>Kubernetes 提供了 Disruption Budget 这一特性，以帮助我们在高频次自愿的毁坏会发生的情况下，仍然运行高可用的应用程序。</p><h2 id="disruption-budget如何工作" tabindex="-1"><a class="header-anchor" href="#disruption-budget如何工作" aria-hidden="true">#</a> Disruption Budget如何工作</h2><p>应用程序管理员可以为每一个应用程序创建 <code>PodDisruptionBudget</code> 对象（PDB）。PDB限制了多副本应用程序在自愿的毁坏情况发生时，最多有多少个副本可以同时停止。例如，一个 web 前端的程序需要确保可用的副本数不低于总副本数的一定比例。</p>',6),x=t("code",null,"kubectl drain",-1),E={href:"https://kubernetes.io/docs/tasks/administer-cluster/safely-drain-node/#the-eviction-api",target:"_blank",rel:"noopener noreferrer"},S=t("p",null,[t("code",null,"kubectl drain"),e(" 命令会尝试将节点上所有的 Pod 驱逐掉。驱逐请求可能会临时被拒绝，"),t("code",null,"kubectl drain"),e(" 将周期性地重试失败的请求，直到节点上所有的 Pod 都以终止，或者直到超过了预先配置的超时时间。")],-1),w=t("p",null,[e("PDB 指定了应用程序最少期望的副本数（相对于总副本数）。例如，某个 Deployment 的 "),t("code",null,".spec.replicas"),e(" 为 5，期望的副本数是 5个。如果他对应的 PDB 允许最低 4个副本数，则 Eviction API（"),t("code",null,"kubectl drain"),e("）在同一时刻最多会允许1个自愿的毁坏，而不是2个或更多：")],-1),A=t("li",null,[e("PDB 通过 Pod 的 "),t("code",null,".metadata.ownerReferences"),e(" 查找到其对应的控制器（Deployment、StatefulSet）")],-1),L=t("li",null,[e("PDB 通过 控制器（Deployment、StatefulSet）的 "),t("code",null,".spec.replicas"),e(" 字段来确定期望的副本数")],-1),F=t("li",null,"PDB 通过控制器（Deployment、StatefulSet）的 label selector 来确定哪些 Pod 属于同一个应用程序",-1),K=t("li",null,[e("PDB 不能阻止 "),t("a",{href:"#%E8%87%AA%E6%84%BF%E7%9A%84%E5%92%8C%E9%9D%9E%E8%87%AA%E6%84%BF%E7%9A%84%E6%AF%81%E5%9D%8F"},"非自愿的毁坏"),e(" 发生，但是当这类毁坏发生时，将被计入到当前毁坏数里")],-1),N=t("code",null,"kubectl drain",-1),I=l('<h2 id="pdb-example" tabindex="-1"><a class="header-anchor" href="#pdb-example" aria-hidden="true">#</a> PDB Example</h2><p>假设有一个集群共有三个工作节点，<code>node-1</code>、<code>node-2</code>、<code>node-3</code>，集群上运行了多个应用程序，其中一个 Deployment 有 3个 Pod 副本 <code>pod-a</code>、<code>pod-b</code>、<code>pod-c</code>，并且对应了 PDB 限定 3 个 Pod 中至少要有 2 个可用。另外有一个无关的 <code>pod-x</code> 没有对应的PDB。最开始时，Pod 在节点上的分布如下表所示：</p><table><thead><tr><th>node-1</th><th>node-2</th><th>node-3</th></tr></thead><tbody><tr><td>pod-a <em><strong>available</strong></em></td><td>pod-b <em><strong>available</strong></em></td><td>pod-c <em><strong>available</strong></em></td></tr><tr><td>pod-x <em><strong>available</strong></em></td><td></td><td></td></tr></tbody></table><p>此时，假设集群管理员想要重启机器，以便更新 Linux 内核版本修复其中的一个漏洞。集群管理员首先尝试使用 <code>kubectl drain</code> 命令排空 <code>node-1</code>，此时 <code>kubectl drain</code> 将尝试驱逐 <code>pod-a</code> 和 <code>pod-x</code>。这个操作将立刻能够执行成功，两个 Pod 都将同时进入 <code>terminating</code> 状态，集群的状态将如下所示：</p><table><thead><tr><th>node-1 <em><strong>draining</strong></em></th><th>node-2</th><th>node-3</th></tr></thead><tbody><tr><td>pod-a <em><strong>terminating</strong></em></td><td>pod-b <em><strong>available</strong></em></td><td>pod-c <em><strong>available</strong></em></td></tr><tr><td>pod-x <em><strong>terminating</strong></em></td><td></td><td></td></tr></tbody></table><p>Deployment控制器发现其中的一个 Pod 正在终止，因此，将立刻创建一个新的 Pod 以替代该 Pod，假设其为 <code>pod-d</code>。由于 <code>node-1</code> 已经被标记不可用（cordoned 警戒线），<code>pod-d</code> 将调度到另外一个节点上。另外一个控制器同样也为 <code>pod-x</code> 创建了一个替代 Pod <code>pod-y</code>。</p><p>此时，集群状态如下所示：</p><table><thead><tr><th>node-1 <em><strong>draining</strong></em></th><th>node-2</th><th>node-3</th></tr></thead><tbody><tr><td>pod-a <em><strong>terminating</strong></em></td><td>pod-b <em><strong>available</strong></em></td><td>pod-c <em><strong>available</strong></em></td></tr><tr><td>pod-x <em><strong>terminating</strong></em></td><td>pod-d <em><strong>starting</strong></em></td><td>pod-y</td></tr></tbody></table><p>当 <code>pod-a</code> 和 <code>pod-x</code> 终止以后，集群状态如下所示：</p><table><thead><tr><th>node-1 <em><strong>drained</strong></em></th><th>node-2</th><th>node-3</th></tr></thead><tbody><tr><td></td><td>pod-b <em><strong>available</strong></em></td><td>pod-c <em><strong>available</strong></em></td></tr><tr><td></td><td>pod-d <em><strong>starting</strong></em></td><td>pod-y</td></tr></tbody></table><p>此时，如果集群管理员不够耐心，立刻尝试排空 <code>node-2</code> 或 <code>node-3</code>，则 <code>kubectl drain</code> 命令将被组织阻止，因为当前该 Deployment 只有 2个可用的 Pod，而其 PDB 要求至少有 2个可用的 Pod。</p><p>当 <code>pod-d</code> 完成启动后，集群的状态将如下所示：</p><table><thead><tr><th>node-1 <em><strong>drained</strong></em></th><th>node-2</th><th>node-3</th></tr></thead><tbody><tr><td></td><td>pod-b <em><strong>available</strong></em></td><td>pod-c <em><strong>available</strong></em></td></tr><tr><td></td><td>pod-d <em><strong>available</strong></em></td><td>pod-y</td></tr></tbody></table><p>此时，集群管理员尝试排空 <code>node-2</code>。<code>kubectl drain</code> 将按照某种顺序尝试驱逐 node-2 上的两个 Pod，假设先是 <code>pod-b</code> 然后是 <code>pod-d</code>。驱逐 <code>pod-b</code> 的操作将执行成功，但是，当 <code>kubectl drain</code> 尝试驱逐 <code>pod-d</code> 时，该请求将被拒绝，否则该 Deployment 将只剩下一个可用的 Pod。</p><p>Deployment 此时将创建一个 Pod <code>pod-e</code> 用于替换 Pod <code>pod-b</code>。由于集群中没有足够的资源来调度 <code>pod-e</code>，<code>kubectl drain</code> 将再次被阻止。集群状态如下所示：</p><table><thead><tr><th>node-1 <em><strong>drained</strong></em></th><th>node-2</th><th>node-3</th><th>no node</th></tr></thead><tbody><tr><td></td><td>pod-b <em><strong>available</strong></em></td><td>pod-c <em><strong>available</strong></em></td><td>pod-e <em><strong>pending</strong></em></td></tr><tr><td></td><td>pod-d <em><strong>available</strong></em></td><td>pod-y</td><td></td></tr></tbody></table><p>此时，集群管理员需要向集群中添加节点，才能继续集群的升级操作。</p><p>Kubernetes中，如下因素决定了毁坏发生的频率：</p><ul><li>应用程序所需要的副本数</li><li>对一个 Pod 执行优雅终止（gracefully shutdown）所需要的时间</li><li>新的 Pod 实例启动所需要的时间</li><li>控制器的类型</li><li>集群资源的容量</li></ul><h2 id="区分集群管理员和应用管理员的角色" tabindex="-1"><a class="header-anchor" href="#区分集群管理员和应用管理员的角色" aria-hidden="true">#</a> 区分集群管理员和应用管理员的角色</h2><p>通常，我们认为集群管理员和应用管理员是不同的角色，且相互之间所共有的知识并不多。对这两个角色的职责进行区分，在如下场景中是非常有用的：</p><ul><li>多个应用程序团队共享一个 Kubernetes 集群</li><li>第三方工具或服务将集群的管理自动化</li></ul><p>Pod Disruption Budget 是区分两种角色时的必要的界面，双方要就此概念达成共识。如果你所在的组织中，并不严格区分集群管理员和应用程序管理员，则，您并不需要使用 Pod Disruption Budget。</p><h2 id="如何执行毁坏性的操作-disruptive-action" tabindex="-1"><a class="header-anchor" href="#如何执行毁坏性的操作-disruptive-action" aria-hidden="true">#</a> 如何执行毁坏性的操作（Disruptive Action）</h2><p>如果您是集群管理员，且需要在所有节点上执行毁坏性的操作（disruptive action），例如节点或系统软件的升级，此时，可能的选择有：</p><ul><li>接受升级过程中的停机时间</li><li>故障转移（Failover）到另外一个集群副本 <ul><li>无停机时间，但是将有额外的代价，因为需要由双份的节点以及更多的人力成本来管理集群之间的切换</li></ul></li><li>编写容错的应用程序（disruption tolerant application）并使用 PDB <ul><li>无停机时间</li><li>最少的资源冗余</li><li>支持更多的集群管理自动化</li><li>编写容错的应用程序（disruption-tolerant application）非常需要技巧，但是要容忍自愿的毁坏所做的工作与支持自动伸缩（autoscaling）与容忍非自愿的毁坏（tolerating involuntary disruption）所做的工作是大量重叠的</li></ul></li></ul>',26);function V(C,R){const i=r("ExternalLinkIcon"),d=r("RouterLink");return s(),c("div",null,[u,t("blockquote",null,[t("p",null,[e("参考文档： "),t("a",h,[e("Disruptions"),o(i)])])]),m,t("ul",null,[t("li",null,[t("a",g,[e("排空节点"),o(i)]),e(" 以便维修或升级")]),b,_]),P,f,D,y,k,t("ul",null,[t("li",null,[e("确保您的 Pod "),o(d,{to:"/learning/k8s-intermediate/config/computing-resource.html"},{default:n(()=>[e("申请合适的计算资源")]),_:1})]),t("li",null,[e("如果需要高可用，为您的程序运行多个副本，参考 "),o(d,{to:"/learning/k8s-intermediate/workload/wl-deployment/"},{default:n(()=>[e("Deployment")]),_:1}),e("、"),o(d,{to:"/learning/k8s-intermediate/workload/wl-statefulset/"},{default:n(()=>[e("StatefulSet")]),_:1})]),t("li",null,[e("如果需要更高的高可用性，将应用程序副本分布到多个机架上（参考 "),o(d,{to:"/learning/k8s-intermediate/config/assign-pod-node.html#affinity-and-anti-affinity"},{default:n(()=>[e("anti-affinity")]),_:1}),e("）或分不到多个地区（使用 "),t("a",v,[e("multi-zone cluster"),o(i)]),e("）")])]),B,t("p",null,[e("集群管理员以及托管供应商在进行系统维护时，应该使用兼容 PodDisruptionBudget 的工具（例如 "),x,e("，此类工具调用 "),t("a",E,[e("Eviction API"),o(i)]),e("）而不是直接删除 Pod 或者 Deployment。")]),S,w,t("ul",null,[A,L,F,K,t("li",null,[e("通过 "),N,e(" 驱逐 Pod 时，Pod 将被优雅地终止（gracefully terminated，参考 "),o(d,{to:"/learning/k8s-intermediate/workload/pod.html#termination-of-pods"},{default:n(()=>[e("terminationGracePeriodSeconds")]),_:1}),e("）")])]),t("p",null,[e("在滚动更新过程中被删除的 Pod 也将计入到 PDB 的当前毁坏数，但是控制器（例如 Deployment、StatefulSet）在执行滚动更新时，并不受 PDB 的约束。滚动更新过程中，同时可以删除的 Pod 数量在控制器对象（Deployment、StatefulSet等）的定义中规定，参考"),o(d,{to:"/learning/k8s-intermediate/workload/wl-deployment/update.html"},{default:n(()=>[e("滚动更新")]),_:1}),e("。")]),I])}const G=a(p,[["render",V],["__file","disruption.html.vue"]]);export{G as default};
