import{_ as s,c as i,o as a,U as n}from"./chunks/framework.y0HOe2qR.js";const F=JSON.parse('{"title":"3.20 没有 accept，能建立 TCP 连接吗？","description":"","frontmatter":{},"headers":[],"relativePath":"datacom/network/3_tcp/3.20.tcp_no_accpet.md","filePath":"datacom/network/3_tcp/3.20.tcp_no_accpet.md","lastUpdated":1705029886000}'),e={name:"datacom/network/3_tcp/3.20.tcp_no_accpet.md"},p=n(`<h1 id="_3-20-没有-accept-能建立-tcp-连接吗" tabindex="-1">3.20 没有 accept，能建立 TCP 连接吗？ <a class="header-anchor" href="#_3-20-没有-accept-能建立-tcp-连接吗" aria-label="Permalink to &quot;3.20 没有 accept，能建立 TCP 连接吗？&quot;">​</a></h1><blockquote><p>来源：公众号@小白debug 原文地址：<a href="https://mp.weixin.qq.com/s/oPX_JoZUaLn6sW54yppfvA" target="_blank" rel="noreferrer">阿里二面：没有 accept，能建立 TCP 连接吗？</a></p></blockquote><p>大家好，我是小林。</p><p>这次，我们来讨论一下，<strong>没有 accept，能建立 TCP 连接吗？</strong></p><p>下面这个动图，是我们平时客户端和服务端建立连接时的代码流程。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/e0d405a55626eb8e4a52553a54680618.gif" alt="握手建立连接流程"></p><p>对应的是下面一段简化过的服务端伪代码。</p><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /*Step 1: 创建服务器端监听socket描述符listen_fd*/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    listen_fd </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> socket</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(AF_INET, SOCK_STREAM, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /*Step 2: bind绑定服务器端的IP和端口，所有客户端都向这个IP和端口发送和请求数据*/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    bind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(listen_fd, xxx);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /*Step 3: 服务端开启监听*/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    listen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(listen_fd, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">128</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /*Step 4: 服务器等待客户端的链接，返回值cfd为客户端的socket描述符*/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    cfd </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> accept</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(listen_fd, xxx);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      /*Step 5: 读取客户端发来的数据*/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> read</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(cfd, buf, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">sizeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(buf));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>估计大家也是老熟悉这段伪代码了。</p><p>需要注意的是，在执行<code>listen()</code>方法之后还会执行一个<code>accept()</code>方法。</p><p><strong>一般情况</strong>下，如果启动服务器，会发现最后程序会<strong>阻塞在</strong><code>accept()</code>里。</p><p>此时服务端就算ok了，就等客户端了。</p><p>那么，再看下简化过的客户端伪代码。</p><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /*Step 1: 创建客户端端socket描述符cfd*/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    cfd </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> socket</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(AF_INET, SOCK_STREAM, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /*Step 2: connect方法,对服务器端的IP和端口号发起连接*/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ret </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> connect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(cfd, xxxx);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /*Step 4: 向服务器端写数据*/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(cfd, buf, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">strlen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(buf));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>客户端比较简单，创建好<code>socket</code>之后，直接就发起<code>connect</code>方法。</p><p>此时回到服务端，会发现<strong>之前一直阻塞的accept方法，返回结果了</strong>。</p><p>这就算两端成功建立好了一条连接。之后就可以愉快的进行读写操作了。</p><p>那么，我们今天的问题是，<strong>如果没有这个accept方法，TCP连接还能建立起来吗？</strong></p><p>其实只要在执行<code>accept()</code> 之前执行一个 <code>sleep(20)</code>，然后立刻执行客户端相关的方法，同时抓个包，就能得出结论。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/2cfc1d028f3e37f10c2f81375ddb998a.png" alt="不执行accept时抓包结果"></p><p>从抓包结果看来，<strong>就算不执行accept()方法，三次握手照常进行，并顺利建立连接。</strong></p><p>更骚气的是，<strong>在服务端执行accept()前，如果客户端发送消息给服务端，服务端是能够正常回复ack确认包的。</strong></p><p>并且，<code>sleep(20)</code>结束后，服务端正常执行<code>accept()</code>，客户端前面发送的消息，还是能正常收到的。</p><p>通过这个现象，我们可以多想想为什么。顺便好好了解下三次握手的细节。</p><h2 id="三次握手的细节分析" tabindex="-1">三次握手的细节分析 <a class="header-anchor" href="#三次握手的细节分析" aria-label="Permalink to &quot;三次握手的细节分析&quot;">​</a></h2><p>我们先看面试八股文的老股，三次握手。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/8d55a06f2efa946921ff61a008c76b00.png" alt="TCP三次握手"></p><p>服务端代码，对socket执行bind方法可以绑定监听端口，然后执行<code>listen方法</code>后，就会进入监听（<code>LISTEN</code>）状态。内核会为每一个处于<code>LISTEN</code>状态的<code>socket</code> 分配两个队列，分别叫<strong>半连接队列和全连接队列</strong>。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/d7e2d60b28b0f9b460aafbf1bd6e7892.png" alt="每个listen Socket都有一个全连接和半连接队列"></p><h3 id="半连接队列、全连接队列是什么" tabindex="-1">半连接队列、全连接队列是什么 <a class="header-anchor" href="#半连接队列、全连接队列是什么" aria-label="Permalink to &quot;半连接队列、全连接队列是什么&quot;">​</a></h3><p><img src="https://img-blog.csdnimg.cn/img_convert/36242c85809865fcd2da48594de15ebb.png" alt="半连接队列和全连接队列"></p><ul><li><strong>半连接队列（SYN队列）</strong>，服务端收到<strong>第一次握手</strong>后，会将<code>sock</code>加入到这个队列中，队列内的<code>sock</code>都处于<code>SYN_RECV</code> 状态。</li><li><strong>全连接队列（ACCEPT队列）</strong>，在服务端收到<strong>第三次握手</strong>后，会将半连接队列的<code>sock</code>取出，放到全连接队列中。队列里的<code>sock</code>都处于 <code>ESTABLISHED</code>状态。这里面的连接，就<strong>等着服务端执行accept()后被取出了。</strong></li></ul><p>看到这里，文章开头的问题就有了答案，建立连接的过程中根本不需要<code>accept()</code>参与， <strong>执行accept()只是为了从全连接队列里取出一条连接。</strong></p><p>我们把话题再重新回到这两个队列上。</p><p>虽然都叫<strong>队列</strong>，但其实<strong>全连接队列（icsk_accept_queue）是个链表</strong>，而<strong>半连接队列（syn_table）是个哈希表</strong>。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/6f964fb09d6971dab1762a45dfa30b3b.png" alt="半连接全连接队列的内部结构"></p><h3 id="为什么半连接队列要设计成哈希表" tabindex="-1">为什么半连接队列要设计成哈希表 <a class="header-anchor" href="#为什么半连接队列要设计成哈希表" aria-label="Permalink to &quot;为什么半连接队列要设计成哈希表&quot;">​</a></h3><p>先对比下<strong>全连接里队列</strong>，他本质是个链表，因为也是线性结构，说它是个队列也没毛病。它里面放的都是已经建立完成的连接，这些连接正等待被取走。而服务端取走连接的过程中，并不关心具体是哪个连接，只要是个连接就行，所以直接从队列头取就行了。这个过程算法复杂度为<code>O(1)</code>。</p><p>而<strong>半连接队列</strong>却不太一样，因为队列里的都是不完整的连接，嗷嗷等待着第三次握手的到来。那么现在有一个第三次握手来了，则需要从队列里把相应IP端口的连接取出，<strong>如果半连接队列还是个链表，那我们就需要依次遍历，才能拿到我们想要的那个连接，算法复杂度就是O(n)。</strong></p><p>而如果将半连接队列设计成哈希表，那么查找半连接的算法复杂度就回到<code>O(1)</code>了。</p><p>因此出于效率考虑，全连接队列被设计成链表，而半连接队列被设计为哈希表。</p><h3 id="怎么观察两个队列的大小" tabindex="-1">怎么观察两个队列的大小 <a class="header-anchor" href="#怎么观察两个队列的大小" aria-label="Permalink to &quot;怎么观察两个队列的大小&quot;">​</a></h3><h4 id="查看全连接队列" tabindex="-1">查看全连接队列 <a class="header-anchor" href="#查看全连接队列" aria-label="Permalink to &quot;查看全连接队列&quot;">​</a></h4><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># ss -lnt</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">State</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      Recv-Q</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Send-Q</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     Local</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Address:Port</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">           Peer</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Address:Port</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">LISTEN</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">     0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      128</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        127.0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.0.1:46269</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              *</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>通过<code>ss -lnt</code>命令，可以看到全连接队列的大小，其中<code>Send-Q</code>是指全连接队列的最大值，可以看到我这上面的最大值是<code>128</code>；<code>Recv-Q</code>是指当前的全连接队列的使用值，我这边用了<code>0</code>个，也就是全连接队列里为空，连接都被取出来了。</p><p>当上面<code>Send-Q</code>和<code>Recv-Q</code>数值很接近的时候，那么全连接队列可能已经满了。可以通过下面的命令查看是否发生过队列<strong>溢出</strong>。</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># netstat -s | grep overflowed</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    4343</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> times</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> the</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> listen</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> queue</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> of</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> a</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> socket</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> overflowed</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>上面说明发生过<code>4343次</code>全连接队列溢出的情况。这个查看到的是<strong>历史发生过的次数</strong>。</p><p>如果配合使用<code>watch -d</code> 命令，可以自动每<code>2s</code>间隔执行相同命令，还能高亮显示变化的数字部分，如果溢出的数字不断变多，说明<strong>正在发生</strong>溢出的行为。</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># watch -d &#39;netstat -s | grep overflowed&#39;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Every</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2.0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">s:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> netstat</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> grep</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> overflowed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Fri</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Sep</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 17</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 09</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:00:45</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2021</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    4343</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> times</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> the</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> listen</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> queue</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> of</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> a</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> socket</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> overflowed</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h4 id="查看半连接队列" tabindex="-1">查看半连接队列 <a class="header-anchor" href="#查看半连接队列" aria-label="Permalink to &quot;查看半连接队列&quot;">​</a></h4><p>半连接队列没有命令可以直接查看到，但因为半连接队列里，放的都是<code>SYN_RECV</code>状态的连接，那可以通过统计处于这个状态的连接的数量，间接获得半连接队列的长度。</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># netstat -nt | grep -i &#39;127.0.0.1:8080&#39; | grep -i &#39;SYN_RECV&#39; | wc -l</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">0</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>注意半连接队列和全连接队列都是挂在某个<code>Listen socket</code>上的，我这里用的是<code>127.0.0.1:8080</code>，大家可以替换成自己想要查看的<strong>IP端口</strong>。</p><p>可以看到我的机器上的半连接队列长度为<code>0</code>，这个很正常，<strong>正经连接谁会没事老待在半连接队列里。</strong></p><p>当队列里的半连接不断增多，最终也是会发生溢出，可以通过下面的命令查看。</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># netstat -s | grep -i &quot;SYNs to LISTEN sockets dropped&quot; </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    26395</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> SYNs</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> LISTEN</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sockets</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dropped</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>可以看到，我的机器上一共发生了<code>26395</code>次半连接队列溢出。同样建议配合<code>watch -d</code> 命令使用。</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># watch -d &#39;netstat -s | grep -i &quot;SYNs to LISTEN sockets dropped&quot;&#39;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Every</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2.0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">s:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> netstat</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> grep</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;SYNs to LISTEN sockets dropped&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Fri</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Sep</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 17</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 08</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:36:38</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2021</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    26395</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> SYNs</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> LISTEN</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sockets</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dropped</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="全连接队列满了会怎么样" tabindex="-1">全连接队列满了会怎么样？ <a class="header-anchor" href="#全连接队列满了会怎么样" aria-label="Permalink to &quot;全连接队列满了会怎么样？&quot;">​</a></h3><p>如果队列满了，服务端还收到客户端的第三次握手ACK，默认当然会丢弃这个ACK。</p><p>但除了丢弃之外，还有一些附带行为，这会受 <code>tcp_abort_on_overflow</code> 参数的影响。</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># cat /proc/sys/net/ipv4/tcp_abort_on_overflow</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">0</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li><code>tcp_abort_on_overflow</code>设置为 0，全连接队列满了之后，会丢弃这个第三次握手ACK包，并且开启定时器，重传第二次握手的SYN+ACK，如果重传超过一定限制次数，还会把对应的<strong>半连接队列里的连接</strong>给删掉。</li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/874f2fb7108020fd4dcfa021f377ec66.png" alt="tcp_abort_on_overflow为0"></p><ul><li><code>tcp_abort_on_overflow</code>设置为 1，全连接队列满了之后，就直接发RST给客户端，效果上看就是连接断了。</li></ul><p>这个现象是不是很熟悉，服务端<strong>端口未监听</strong>时，客户端尝试去连接，服务端也会回一个RST。这两个情况长一样，所以客户端这时候收到RST之后，其实无法区分到底是<strong>端口未监听</strong>，还是<strong>全连接队列满了</strong>。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/6a01c5df74748870a69921da89825d9c.png" alt="tcp_abort_on_overflow为1"></p><h3 id="半连接队列要是满了会怎么样" tabindex="-1">半连接队列要是满了会怎么样 <a class="header-anchor" href="#半连接队列要是满了会怎么样" aria-label="Permalink to &quot;半连接队列要是满了会怎么样&quot;">​</a></h3><p><strong>一般是丢弃</strong>，但这个行为可以通过 <code>tcp_syncookies</code> 参数去控制。但比起这个，更重要的是先了解下半连接队列为什么会被打满。</p><p>首先我们需要明白，一般情况下，半连接的&quot;生存&quot;时间其实很短，只有在第一次和第三次握手间，如果半连接都满了，说明服务端疯狂收到第一次握手请求，如果是线上游戏应用，能有这么多请求进来，那说明你可能要富了。但现实往往比较骨感，你可能遇到了<strong>SYN Flood攻击</strong>。</p><p>所谓<strong>SYN Flood攻击</strong>，可以简单理解为，攻击方模拟客户端疯狂发第一次握手请求过来，在服务端憨憨地回复第二次握手过去之后，客户端死活不发第三次握手过来，这样做，可以把服务端半连接队列打满，从而导致正常连接不能正常进来。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/d894de5374a12bd5d75d86d4a718d186.png" alt="syn攻击"></p><p>那这种情况怎么处理？有没有一种方法可以<strong>绕过半连接队列</strong>？</p><p>有，上面提到的<code>tcp_syncookies</code>派上用场了。</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># cat /proc/sys/net/ipv4/tcp_syncookies</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">1</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>当它被设置为1的时候，客户端发来<strong>第一次握手</strong>SYN时，服务端<strong>不会将其放入半连接队列中</strong>，而是直接生成一个<code>cookies</code>，这个<code>cookies</code>会跟着<strong>第二次握手</strong>，发回客户端。客户端在发<strong>第三次握手</strong>的时候带上这个<code>cookies</code>，服务端验证到它就是当初发出去的那个，就会建立连接并放入到全连接队列中。可以看出整个过程不再需要半连接队列的参与。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/d696b8b345526533bde8fa990e205c32.png" alt="tcp_syncookies=1"></p><h4 id="会有一个cookies队列吗" tabindex="-1">会有一个cookies队列吗 <a class="header-anchor" href="#会有一个cookies队列吗" aria-label="Permalink to &quot;会有一个cookies队列吗&quot;">​</a></h4><p>生成是<code>cookies</code>，保存在哪呢？<strong>是不是会有一个队列保存这些cookies？</strong></p><p>我们可以反过来想一下，如果有<code>cookies</code>队列，那它会跟半连接队列一样，到头来，还是会被<strong>SYN Flood 攻击</strong>打满。</p><p>实际上<code>cookies</code>并不会有一个专门的队列保存，它是通过<strong>通信双方的IP地址端口、时间戳、MSS</strong>等信息进行<strong>实时计算</strong>的，保存在<strong>TCP报头</strong>的<code>seq</code>里。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/6d280b0946a73ea6185653cbcfcc489f.png" alt="tcp报头_seq的位置"></p><p>当服务端收到客户端发来的第三次握手包时，会通过seq还原出<strong>通信双方的IP地址端口、时间戳、MSS</strong>，验证通过则建立连接。</p><h4 id="cookies方案为什么不直接取代半连接队列" tabindex="-1">cookies方案为什么不直接取代半连接队列？ <a class="header-anchor" href="#cookies方案为什么不直接取代半连接队列" aria-label="Permalink to &quot;cookies方案为什么不直接取代半连接队列？&quot;">​</a></h4><p>目前看下来<code>syn cookies</code>方案省下了半连接队列所需要的队列内存，还能解决 <strong>SYN Flood攻击</strong>，那为什么不直接取代半连接队列？</p><p>凡事皆有利弊，<code>cookies</code>方案虽然能防 <strong>SYN Flood攻击</strong>，但是也有一些问题。因为服务端并不会保存连接信息，所以如果传输过程中数据包丢了，也不会重发第二次握手的信息。</p><p>另外，编码解码<code>cookies</code>，都是比较<strong>耗CPU</strong>的，利用这一点，如果此时攻击者构造大量的<strong>第三次握手包（ACK包）</strong>，同时带上各种瞎编的<code>cookies</code>信息，服务端收到<code>ACK包</code>后<strong>以为是正经cookies</strong>，憨憨地跑去解码（<strong>耗CPU</strong>），最后发现不是正经数据包后才丢弃。</p><p>这种通过构造大量<code>ACK包</code>去消耗服务端资源的攻击，叫<strong>ACK攻击</strong>，受到攻击的服务器可能会因为<strong>CPU资源耗尽</strong>导致没能响应正经请求。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/15a0a5f7fe15ee2bc5e07492eda5a8ea.gif" alt="ack攻击"></p><h3 id="没有listen-为什么还能建立连接" tabindex="-1">没有listen，为什么还能建立连接 <a class="header-anchor" href="#没有listen-为什么还能建立连接" aria-label="Permalink to &quot;没有listen，为什么还能建立连接&quot;">​</a></h3><p>那既然没有<code>accept</code>方法能建立连接，那是不是没有<code>listen</code>方法，也能建立连接？是的，之前写的一篇文章提到过客户端是可以自己连自己的形成连接（<strong>TCP自连接</strong>），也可以两个客户端同时向对方发出请求建立连接（<strong>TCP同时打开</strong>），这两个情况都有个共同点，就是<strong>没有服务端参与，也就是没有listen，就能建立连接。</strong></p><p>当时文章最后也留了个疑问，<strong>没有listen，为什么还能建立连接？</strong></p><p>我们知道执行<code>listen</code>方法时，会创建半连接队列和全连接队列。</p><p>三次握手的过程中会在这两个队列中暂存连接信息。</p><p>所以形成连接，前提是你得<strong>有个地方存放着</strong>，方便握手的时候能根据IP端口等信息找到socket信息。</p><p><strong>那么客户端会有半连接队列吗？</strong></p><p><strong>显然没有</strong>，因为客户端没有执行<code>listen</code>，因为半连接队列和全连接队列都是在执行<code>listen</code>方法时，内核自动创建的。</p><p>但内核还有个<strong>全局hash表</strong>，可以用于存放<code>sock</code>连接的信息。这个全局<code>hash</code>表其实还细分为<code>ehash，bhash和listen_hash</code>等，但因为过于细节，大家理解成有一个<strong>全局hash</strong>就够了，</p><p>在TCP自连接的情况中，客户端在<code>connect</code>方法时，最后会将自己的连接信息放入到这个<strong>全局hash表</strong>中，然后将信息发出，消息在经过回环地址重新回到TCP传输层的时候，就会根据IP端口信息，再一次从这个<strong>全局hash</strong>中取出信息。于是握手包一来一回，最后成功建立连接。</p><p>TCP 同时打开的情况也类似，只不过从一个客户端变成了两个客户端而已。</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><ul><li><strong>每一个</strong><code>socket</code>执行<code>listen</code>时，内核都会自动创建一个半连接队列和全连接队列。</li><li>第三次握手前，TCP连接会放在半连接队列中，直到第三次握手到来，才会被放到全连接队列中。</li><li><code>accept方法</code>只是为了从全连接队列中拿出一条连接，本身跟三次握手几乎<strong>毫无关系</strong>。</li><li>出于效率考虑，虽然都叫队列，但半连接队列其实被设计成了<strong>哈希表</strong>，而全连接队列本质是链表。</li><li>全连接队列满了，再来第三次握手也会丢弃，此时如果<code>tcp_abort_on_overflow=1</code>，还会直接发<code>RST</code>给客户端。</li><li>半连接队列满了，可能是因为受到了<code>SYN Flood</code>攻击，可以设置<code>tcp_syncookies</code>，绕开半连接队列。</li><li>客户端没有半连接队列和全连接队列，但有一个<strong>全局hash</strong>，可以通过它实现自连接或TCP同时打开。</li></ul><hr><p>最新的图解文章都在公众号首发，别忘记关注哦！！如果你想加入百人技术交流群，扫码下方二维码回复「加群」。</p><p><img src="https://cdn.xiaolincoding.com/gh/xiaolincoder/ImageHost3@main/%E5%85%B6%E4%BB%96/%E5%85%AC%E4%BC%97%E5%8F%B7%E4%BB%8B%E7%BB%8D.png" alt="img"></p>`,106),t=[p];function l(h,o,r,c,d,k){return a(),i("div",null,t)}const b=s(e,[["render",l]]);export{F as __pageData,b as default};
